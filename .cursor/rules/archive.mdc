---
description: 測試成果歸檔規則 - 自動調用場景：測試完成、測試失敗、測試報告生成、性能測試、安全測試、單元測試、整合測試、用戶體驗測試、自動化測試、手動測試、測試覆蓋率、測試質量、測試結果分析、測試問題追蹤、測試改進建議、測試里程碑、測試環境清理、測試數據收集、測試驗證、測試修復、測試優化、測試監控、測試回歸、測試穩定性、測試有效性、測試價值評估、測試投入產出比、測試自動化程度、測試執行時間、測試資源使用、測試重複性、測試通過率、測試失敗率、測試跳過率、測試錯誤率、測試瓶頸、測試性能、測試安全、測試功能、測試兼容性、測試可靠性、測試可維護性、測試可擴展性、測試可重用性、測試可移植性、測試可測試性、測試可讀性、測試可理解性、測試可修改性、測試可調試性、測試可部署性、測試可運維性、測試可監控性、測試可告警性、測試可恢復性、測試可備份性、測試可還原性、測試可遷移性、測試可升級性、測試可降級性、測試可回滾性、測試可切換性、測試可隔離性、測試可並行性、測試可串行性、測試可異步性、測試可同步性、測試可並發性、測試可分佈性、測試可集中性、測試可分散性、測試可聚合性、測試可分解性、測試可組合性、測試可拆分性、測試可合併性、測試可分離性、測試可連接性、測試可斷開性、測試可啟動性、測試可停止性、測試可暫停性、測試可恢復性、測試可重啟性、測試可重置性、測試可清除性、測試可清理性、測試可整理性、測試可歸檔性、測試可備份性、測試可還原性、測試可遷移性、測試可升級性、測試可降級性、測試可回滾性、測試可切換性、測試可隔離性、測試可並行性、測試可串行性、測試可異步性、測試可同步性、測試可並發性、測試可分佈性、測試可集中性、測試可分散性、測試可聚合性、測試可分解性、測試可組合性、測試可拆分性、測試可合併性、測試可分離性、測試可連接性、測試可斷開性、測試可啟動性、測試可停止性、測試可暫停性、測試可恢復性、測試可重啟性、測試可重置性、測試可清除性、測試可清理性、測試可整理性、測試可歸檔性
globs: 
alwaysApply: false
---
# 🎯 測試成果歸檔規則文檔

## 📋 規則概述

### 適用場景
當 AI Agent 完成任何類型的測試活動後，必須立即調用此規則進行測試成果歸檔，包括：
- 單元測試執行完成
- 整合測試執行完成
- 性能測試執行完成
- 安全測試執行完成
- 用戶體驗測試執行完成
- 自動化測試執行完成
- 手動測試執行完成

### 歸檔目標
1. **專案根目錄優先**: 確保所有操作都在專案根目錄內進行
2. **記憶庫更新**: 更新相關記憶文檔，記錄測試結果和發現
3. **文檔同步**: 更新 README.md 和 CHANGELOG.md
4. **測試歷史**: 維護完整的測試歷史記錄
5. **問題追蹤**: 記錄發現的問題和解決方案
6. **改進建議**: 基於測試結果提出改進建議
7. **環境安全**: 確保操作環境的安全性和隔離性

## 🧠 記憶庫更新機制

### 0. 專案根目錄優先原則

#### 0.1 環境確認機制
- **專案根目錄檢測**: 在任何操作前，必須使用 `mcp_Desktop_Commander_list_directory` 檢測專案根目錄
- **專案根目錄結構確認**: 使用 `mcp_Desktop_Commander_list_directory` 確認專案根目錄結構，確保在正確的項目環境中
- **環境驗證**: 確保所有操作都在專案根目錄內進行，避免跨項目操作
- **路徑安全**: 所有路徑都必須指向專案根目錄下的 memory_bank/ 目錄

#### 0.2 操作範圍限制
- **僅限專案根目錄**: 所有記憶文檔操作僅限於專案根目錄的 memory_bank/ 目錄
- **禁止跨項目操作**: 嚴禁在專案根目錄外進行任何記憶文檔操作
- **路徑驗證**: 每次操作前都必須驗證路徑是否在專案根目錄內
- **環境隔離**: 確保操作環境的隔離性和安全性

### 1. 標準記憶文檔更新

根據 `initialise-poject.mdc` 中定義的記憶文檔類型，測試歸檔時只更新以下標準記憶文檔：

#### 1.1 錯誤記錄記憶文檔更新
**文件名**: `error_records_[項目名稱].md`
**更新內容**:
- 新增測試發現的錯誤
- 錯誤嚴重程度分類 (Critical/High/Medium/Low)
- 錯誤解決方案記錄
- 錯誤趨勢分析
- 預防措施建議
- 相關測試案例

#### 1.2 開發進度記憶文檔更新
**文件名**: `development_progress_[項目名稱].md`
**更新內容**:
- 測試階段完成狀態
- 測試里程碑記錄
- 測試質量指標
- 測試覆蓋率進展
- 測試自動化程度
- 測試環境狀態

#### 1.3 技術債務記憶文檔更新
**文件名**: `technical_debt_[項目名稱].md`
**更新內容**:
- 測試發現的技術債務
- 測試覆蓋率不足的模組
- 測試不穩定的功能
- 性能測試發現的瓶頸
- 安全測試發現的漏洞
- 測試相關的改進建議

### 2. 歸檔專用記憶文檔管理

#### 2.1 測試歸檔記錄文檔
**文件名**: `test_archive_[項目名稱].md`
**管理策略**: 自動檢查現有歸檔文件，存在則更新，不存在則創建
**創建目的**: 專門記錄測試成果和開發進展
**存儲位置**: 僅限於專案根目錄的 memory_bank/ 目錄

#### 2.2 歸檔文件檢查和更新機制

**檢查流程**:
1. **專案根目錄檢測**: 使用 `mcp_Desktop_Commander_list_directory` 檢測專案根目錄
2. **專案根目錄結構確認**: 使用 `mcp_Desktop_Commander_list_directory` 確認專案根目錄結構，確保在正確的項目環境中
3. **memory_bank目錄掃描**: 使用 `mcp_Desktop_Commander_list_directory` 掃描專案根目錄下的 memory_bank/ 目錄
4. **文件搜索**: 使用 `mcp_Desktop_Commander_search_files` 在專案根目錄的 memory_bank/ 目錄中搜索 `test_archive_*.md` 文件
5. **內容讀取**: 如果文件存在，使用 `mcp_Desktop_Commander_read_file` 讀取現有內容
6. **智能決策**: 
   - 文件存在 → 使用 `mcp_Desktop_Commander_edit_block` 更新內容
   - 文件不存在 → 使用 `mcp_Desktop_Commander_write_file` 在專案根目錄的 memory_bank/ 目錄中創建新文件

**重要原則**:
- **僅限專案根目錄**: 所有操作必須在專案根目錄內進行
- **先確認環境**: 在進行任何操作前，必須先確認專案根目錄結構
- **路徑驗證**: 確保所有路徑都指向專案根目錄下的 memory_bank/ 目錄
- **環境隔離**: 避免在專案根目錄外的任何位置進行操作

**更新策略**:
- **追加模式**: 在現有歸檔文件末尾追加新的測試記錄
- **時間戳記錄**: 每次更新都添加時間戳
- **版本追蹤**: 記錄測試版本和歸檔版本
- **內容結構化**: 保持歸檔內容的結構化格式
**內容結構**:
```markdown
# 測試歸檔記錄

## 歸檔基本信息
- **歸檔時間**: YYYY-MM-DD HH:MM:SS
- **測試版本**: vX.X.X
- **測試類型**: [單元/整合/性能/安全/用戶體驗]
- **測試範圍**: [具體模組或功能]
- **歸檔版本**: vX.X.X (自動遞增)

## 測試結果摘要
- **總測試數**: X
- **通過數**: X
- **失敗數**: X
- **跳過數**: X
- **通過率**: XX%

## 性能指標
- **平均響應時間**: XXXms
- **最大響應時間**: XXXms
- **記憶體使用**: XXXMB
- **CPU使用率**: XX%

## 發現的問題
### 高優先級
- [問題描述] (嚴重程度: Critical/High)

### 中優先級
- [問題描述] (嚴重程度: Medium)

### 低優先級
- [問題描述] (嚴重程度: Low)

## 解決方案記錄
- [問題] → [解決方案] → [驗證結果]

## 改進建議
- [具體建議] (優先級: 高/中/低)

## 開發成果記錄
- **功能完成度**: 記錄功能開發完成情況
- **代碼質量提升**: 記錄代碼質量改進
- **性能優化**: 記錄性能優化成果
- **安全加固**: 記錄安全改進措施
- **用戶體驗提升**: 記錄UX改進成果

---

**更新歷史**:
- YYYY-MM-DD HH:MM:SS - 初始創建
- YYYY-MM-DD HH:MM:SS - 更新測試結果
- YYYY-MM-DD HH:MM:SS - 更新開發成果
```

### 2. 記憶文檔更新流程

#### 2.1 自動檢測機制
- **測試完成觸發**: 任何測試活動完成後自動觸發
- **記憶差異檢測**: 比較測試前後記憶文檔狀態
- **即時更新**: 發現差異立即更新記憶文檔
- **版本控制**: 使用標準命名格式覆蓋舊版本

#### 2.2 更新工具使用
- **專案根目錄檢測**: 使用 `mcp_Desktop_Commander_list_directory` 檢測專案根目錄
- **文件讀取**: 使用 `mcp_Desktop_Commander_read_file` 讀取專案根目錄下的現有記憶
- **文件更新**: 使用 `mcp_Desktop_Commander_edit_block` 在專案根目錄下進行精確更新
- **文件覆蓋**: 使用 `mcp_Desktop_Commander_write_file` 在專案根目錄下直接覆蓋舊版本
- **差異檢測**: 使用 `mcp_Desktop_Commander_search_code` 比較專案根目錄下的記憶差異

#### 2.3 記憶文檔更新標準

**更新原則**:
- 只更新 `initialise-poject.mdc` 中定義的標準記憶文檔
- 自動檢查現有歸檔文件，存在則更新，不存在則創建
- 使用 Desktop Commander 工具進行精確更新
- 確保記憶文檔與項目狀態完全同步
- **僅限專案根目錄**: 所有記憶文檔操作僅限於專案根目錄的 memory_bank/ 目錄

**歸檔文件檢查機制**:
- **專案根目錄檢測**: 使用 `mcp_Desktop_Commander_list_directory` 檢測專案根目錄
- **專案根目錄結構確認**: 使用 `mcp_Desktop_Commander_list_directory` 確認專案根目錄結構，確保在正確的項目環境中
- **memory_bank目錄檢查**: 使用 `mcp_Desktop_Commander_list_directory` 檢查專案根目錄下的 memory_bank/ 目錄
- **文件搜索**: 使用 `mcp_Desktop_Commander_search_files` 在專案根目錄的 memory_bank/ 目錄中搜索現有歸檔文件
- **內容讀取**: 使用 `mcp_Desktop_Commander_read_file` 讀取現有歸檔內容
- **智能更新**: 根據文件存在情況選擇更新或創建，所有操作僅限於專案根目錄
- **環境驗證**: 確保所有操作都在專案根目錄內進行，避免跨項目操作

**更新工具使用**:
- **文件讀取**: `mcp_Desktop_Commander_read_file` 讀取現有記憶
- **文件更新**: `mcp_Desktop_Commander_edit_block` 進行精確更新
- **文件覆蓋**: `mcp_Desktop_Commander_write_file` 直接覆蓋舊版本
- **差異檢測**: `mcp_Desktop_Commander_search_code` 比較記憶差異

## 📝 文檔更新機制

### 1. README.md 更新

#### 1.1 測試狀態更新
- **測試覆蓋率**: 更新當前測試覆蓋率
- **測試狀態**: 更新測試通過/失敗狀態
- **性能指標**: 更新關鍵性能指標
- **版本信息**: 更新最新測試版本

#### 1.2 使用說明更新
- **測試運行**: 更新測試運行說明
- **測試環境**: 更新測試環境要求
- **測試結果**: 更新測試結果查看方式
- **問題報告**: 更新問題報告流程

#### 1.3 項目狀態更新
- **項目健康度**: 基於測試結果更新項目狀態
- **功能完整性**: 更新功能測試狀態
- **性能表現**: 更新性能測試結果
- **安全狀態**: 更新安全測試結果

### 2. CHANGELOG.md 更新

#### 2.1 測試相關變更記錄
```markdown
## [版本號] - YYYY-MM-DD

### 測試改進
- 新增 [具體測試] 測試案例
- 修復 [具體問題] 測試失敗
- 提升測試覆蓋率至 XX%
- 優化 [具體功能] 測試性能

### 測試修復
- 修復 [具體測試] 不穩定問題
- 解決 [具體錯誤] 測試錯誤
- 改進 [具體模組] 測試邏輯

### 測試工具
- 更新測試框架版本
- 新增測試工具配置
- 優化測試執行流程
```

#### 2.2 測試里程碑記錄
- **測試完成里程碑**: 記錄重要測試階段完成
- **測試質量里程碑**: 記錄測試質量提升里程碑
- **測試自動化里程碑**: 記錄測試自動化進展
- **測試覆蓋率里程碑**: 記錄測試覆蓋率達標

## 🔧 歸檔工具使用規範

### 1. Desktop Commander 工具優先使用

#### 1.1 記憶文檔操作
- **讀取記憶**: `mcp_Desktop_Commander_read_file` 讀取現有記憶文檔
- **更新記憶**: `mcp_Desktop_Commander_edit_block` 進行精確更新
- **覆蓋記憶**: `mcp_Desktop_Commander_write_file` 直接覆蓋舊版本
- **搜索記憶**: `mcp_Desktop_Commander_search_code` 搜索記憶內容

#### 1.2 歸檔文件檢查和更新
- **專案根目錄確認**: `mcp_Desktop_Commander_list_directory` 確認專案根目錄結構
- **專案根目錄檢測**: `mcp_Desktop_Commander_list_directory` 檢測專案根目錄，確保在正確的項目環境中
- **目錄掃描**: `mcp_Desktop_Commander_list_directory` 掃描專案根目錄下的 memory_bank/ 目錄
- **文件搜索**: `mcp_Desktop_Commander_search_files` 在專案根目錄的 memory_bank/ 目錄中搜索現有歸檔文件
- **文件檢查**: `mcp_Desktop_Commander_get_file_info` 獲取文件詳細信息
- **智能更新**: 根據文件存在情況選擇更新或創建，所有操作僅限於專案根目錄
- **環境驗證**: 確保所有操作都在專案根目錄內進行

#### 1.2 文檔更新操作
- **讀取文檔**: `mcp_Desktop_Commander_read_file` 讀取 README.md 和 CHANGELOG.md
- **更新文檔**: `mcp_Desktop_Commander_edit_block` 進行精確更新
- **覆蓋文檔**: `mcp_Desktop_Commander_write_file` 直接覆蓋舊版本

#### 1.3 測試結果分析
- **數據分析**: `mcp_Desktop_Commander_start_process` 啟動 Python REPL 分析測試數據
- **結果處理**: `mcp_Desktop_Commander_interact_with_process` 處理測試結果
- **統計分析**: 使用進程管理工具進行測試統計分析

### 2. 備用工具使用

#### 2.1 代碼搜索工具
- **語義搜索**: `codebase_search` 搜索相關代碼
- **精確搜索**: `grep_search` 搜索特定測試模式
- **文件搜索**: `file_search` 查找測試相關文件

#### 2.2 文件編輯工具
- **文件編輯**: `edit_file` 進行文件編輯
- **搜索替換**: `search_replace` 進行批量更新

## 📊 測試結果分析標準

### 1. 測試質量評估

#### 1.1 測試覆蓋率分析
- **行覆蓋率**: 目標 ≥ 90%
- **分支覆蓋率**: 目標 ≥ 85%
- **函數覆蓋率**: 目標 ≥ 95%
- **模組覆蓋率**: 目標 100%

#### 1.2 測試穩定性分析
- **測試通過率**: 目標 ≥ 95%
- **測試重複性**: 目標 100% 穩定
- **測試執行時間**: 目標 < 5分鐘
- **測試資源使用**: 目標最小化

#### 1.3 測試有效性分析
- **問題發現率**: 記錄發現的問題數量
- **問題解決率**: 記錄問題解決比例
- **回歸測試有效性**: 評估回歸測試效果
- **測試價值評估**: 評估測試投入產出比

### 2. 性能測試分析

#### 2.1 響應時間分析
- **平均響應時間**: 目標 < 500ms
- **95%響應時間**: 目標 < 1000ms
- **最大響應時間**: 目標 < 2000ms
- **響應時間穩定性**: 目標變異係數 < 10%

#### 2.2 資源使用分析
- **記憶體使用**: 記錄峰值和平均值
- **CPU使用率**: 記錄峰值和平均值
- **磁盤I/O**: 記錄讀寫操作
- **網絡I/O**: 記錄網絡流量

#### 2.3 並發性能分析
- **並發用戶數**: 記錄最大並發用戶數
- **吞吐量**: 記錄每秒處理請求數
- **錯誤率**: 記錄並發測試錯誤率
- **資源飽和度**: 記錄資源使用飽和度

### 3. 安全測試分析

#### 3.1 漏洞掃描結果
- **高危漏洞**: 記錄高危漏洞數量
- **中危漏洞**: 記錄中危漏洞數量
- **低危漏洞**: 記錄低危漏洞數量
- **漏洞修復率**: 記錄漏洞修復比例

#### 3.2 安全功能測試
- **認證測試**: 記錄認證功能測試結果
- **授權測試**: 記錄授權功能測試結果
- **數據保護測試**: 記錄數據保護測試結果
- **輸入驗證測試**: 記錄輸入驗證測試結果

## 🎯 歸檔流程標準

### 1. 測試完成觸發

#### 1.1 自動觸發條件
- 任何測試腳本執行完成
- 測試報告生成完成
- 測試結果數據收集完成
- 測試環境清理完成

#### 1.2 手動觸發條件
- 用戶明確要求歸檔測試結果
- 測試階段完成需要記錄
- 測試問題需要追蹤記錄
- 測試改進需要記錄

### 2. 歸檔文件檢查和更新流程

#### 2.1 歸檔文件檢查階段
1. **專案根目錄確認**: 使用 `mcp_Desktop_Commander_list_directory` 確認專案根目錄結構
2. **專案根目錄檢測**: 使用 `mcp_Desktop_Commander_list_directory` 檢測專案根目錄，確保在正確的項目環境中
3. **memory_bank目錄掃描**: 使用 `mcp_Desktop_Commander_list_directory` 掃描專案根目錄下的 memory_bank/ 目錄
4. **文件搜索**: 使用 `mcp_Desktop_Commander_search_files` 在專案根目錄的 memory_bank/ 目錄中搜索 `test_archive_*.md` 文件
5. **文件信息獲取**: 使用 `mcp_Desktop_Commander_get_file_info` 獲取文件詳細信息
6. **存在性判斷**: 判斷目標歸檔文件是否存在
7. **環境驗證**: 確保所有操作都在專案根目錄內進行

#### 2.2 歸檔文件更新決策
- **文件存在**: 
  - 使用 `mcp_Desktop_Commander_read_file` 讀取現有內容
  - 使用 `mcp_Desktop_Commander_edit_block` 在文件末尾追加新記錄
  - 更新歸檔版本號和時間戳
- **文件不存在**:
  - 使用 `mcp_Desktop_Commander_write_file` 創建新的歸檔文件
  - 設置初始版本號和創建時間戳
  - 建立完整的歸檔文件結構

### 2. 歸檔執行流程

#### 2.1 準備階段
1. **專案根目錄確認**: 使用 `mcp_Desktop_Commander_list_directory` 確認專案根目錄結構
2. **專案根目錄檢測**: 使用 `mcp_Desktop_Commander_list_directory` 檢測專案根目錄，確保在正確的項目環境中
3. **檢查測試結果**: 確認測試結果文件存在於專案根目錄
4. **檢查現有歸檔**: 使用 `mcp_Desktop_Commander_list_directory` 檢查專案根目錄下的 memory_bank/ 目錄
5. **搜索歸檔文件**: 使用 `mcp_Desktop_Commander_search_files` 在專案根目錄的 memory_bank/ 目錄中搜索現有歸檔文件
6. **讀取現有記憶**: 讀取專案根目錄下的相關記憶文檔
7. **分析測試數據**: 分析測試結果和統計數據
8. **識別關鍵信息**: 識別重要的測試發現
9. **環境驗證**: 確保所有操作都在專案根目錄內進行

#### 2.2 更新階段
1. **更新錯誤記錄**: 記錄新發現的錯誤到專案根目錄下的 `error_records_[項目名稱].md`
2. **更新開發進度**: 更新測試進度狀態到專案根目錄下的 `development_progress_[項目名稱].md`
3. **更新技術債務**: 記錄測試發現的技術債務到專案根目錄下的 `technical_debt_[項目名稱].md`
4. **智能歸檔記錄**: 
   - 檢查專案根目錄下的 `test_archive_[項目名稱].md` 是否存在
   - 存在則使用 `mcp_Desktop_Commander_edit_block` 更新內容
   - 不存在則使用 `mcp_Desktop_Commander_write_file` 在專案根目錄下創建新文件

#### 2.3 文檔同步階段
1. **更新README.md**: 更新專案根目錄下的項目狀態和測試信息
2. **更新CHANGELOG.md**: 記錄專案根目錄下的測試相關變更
3. **檢查文檔一致性**: 確保專案根目錄下所有文檔信息一致
4. **驗證更新完整性**: 確認專案根目錄下所有必要信息已更新

#### 2.4 驗證階段
1. **檢查記憶完整性**: 確認記憶文檔更新完整
2. **檢查歸檔文件**: 確認歸檔文件已正確更新或創建
3. **檢查文檔準確性**: 確認文檔信息準確
4. **檢查格式一致性**: 確認文檔格式一致
5. **檢查時效性**: 確認信息是最新的

### 3. 歸檔質量標準

#### 3.1 完整性標準
- **測試結果完整**: 包含所有測試結果數據
- **問題記錄完整**: 包含所有發現的問題
- **解決方案完整**: 包含所有解決方案記錄
- **改進建議完整**: 包含所有改進建議
- **歸檔文件完整**: 確保歸檔文件檢查和更新機制完整執行

#### 3.2 歸檔文件管理標準
- **自動檢查**: 每次歸檔前自動檢查現有歸檔文件
- **智能更新**: 根據文件存在情況智能選擇更新或創建
- **版本追蹤**: 記錄歸檔文件的版本歷史
- **內容一致性**: 確保歸檔內容與測試結果一致

#### 3.2 準確性標準
- **數據準確**: 測試數據與實際結果一致
- **描述準確**: 問題描述準確無誤
- **分類準確**: 問題分類和優先級準確
- **時間準確**: 時間記錄準確無誤

#### 3.3 時效性標準
- **即時更新**: 測試完成後立即更新
- **實時同步**: 記憶文檔與項目狀態同步
- **及時記錄**: 問題發現後及時記錄
- **定期檢查**: 定期檢查記憶文檔時效性

## 🚀 特殊情況處理

### 1. 測試失敗處理

#### 1.1 測試失敗記錄
- **失敗原因分析**: 詳細記錄失敗原因
- **失敗影響評估**: 評估失敗對項目的影響
- **修復計劃制定**: 制定修復計劃和時間表
- **回歸測試安排**: 安排修復後的回歸測試

#### 1.2 測試不穩定處理
- **不穩定原因分析**: 分析測試不穩定的原因
- **環境問題排查**: 排查測試環境問題
- **測試邏輯優化**: 優化測試邏輯和數據
- **穩定性改進**: 改進測試穩定性

### 2. 性能問題處理

#### 2.1 性能瓶頸識別
- **瓶頸點定位**: 識別性能瓶頸點
- **性能指標分析**: 分析性能指標變化
- **優化方案制定**: 制定性能優化方案
- **優化效果驗證**: 驗證優化效果

#### 2.2 性能回歸處理
- **回歸原因分析**: 分析性能回歸原因
- **回歸影響評估**: 評估回歸影響範圍
- **回歸修復計劃**: 制定回歸修復計劃
- **性能監控加強**: 加強性能監控

### 3. 安全問題處理

#### 3.1 安全漏洞記錄
- **漏洞詳細描述**: 詳細記錄漏洞信息
- **漏洞嚴重程度**: 評估漏洞嚴重程度
- **漏洞修復計劃**: 制定漏洞修復計劃
- **安全測試加強**: 加強安全測試

#### 3.2 安全加固記錄
- **加固措施記錄**: 記錄安全加固措施
- **加固效果驗證**: 驗證加固效果
- **安全標準更新**: 更新安全測試標準
- **安全監控加強**: 加強安全監控

## 📈 持續改進機制

### 1. 歸檔流程優化

#### 1.1 流程效率提升
- **自動化程度**: 提高歸檔自動化程度
- **工具整合**: 整合更多歸檔工具
- **模板標準化**: 標準化歸檔模板
- **質量檢查**: 加強歸檔質量檢查

#### 1.2 歸檔內容優化
- **內容結構化**: 優化歸檔內容結構
- **信息完整性**: 提高信息完整性
- **可讀性改進**: 改進歸檔內容可讀性
- **實用性提升**: 提升歸檔內容實用性

### 2. 記憶庫維護

#### 2.1 記憶文檔維護
- **定期更新**: 定期更新記憶文檔
- **版本控制**: 實施記憶文檔版本控制
- **質量檢查**: 定期檢查記憶文檔質量
- **結構優化**: 優化記憶文檔結構

#### 2.2 記憶庫擴展
- **新文檔類型**: 根據需要添加新的記憶文檔類型
- **模板更新**: 更新記憶文檔模板
- **工具整合**: 整合新的記憶管理工具
- **知識沉澱**: 沉澱歸檔經驗和最佳實踐

## 🎯 規則執行檢查清單

### 測試完成後必須執行的檢查項目

#### 0. 環境確認檢查
- [ ] 專案根目錄已確認並檢測
- [ ] 專案根目錄結構已驗證
- [ ] 所有操作都在專案根目錄內進行
- [ ] 環境隔離性已確保
- [ ] 路徑安全性已驗證

#### 1. 記憶庫更新檢查
- [ ] 錯誤記錄文檔 (`error_records_[項目名稱].md`) 已更新
- [ ] 開發進度文檔 (`development_progress_[項目名稱].md`) 已更新
- [ ] 技術債務文檔 (`technical_debt_[項目名稱].md`) 已更新
- [ ] 測試歸檔文檔 (`test_archive_[項目名稱].md`) 已檢查並更新/創建
- [ ] 歸檔文件檢查機制已正確執行
- [ ] 所有記憶文檔格式正確
- [ ] 記憶文檔內容準確無誤

#### 2. 文檔同步檢查
- [ ] README.md 已更新測試狀態
- [ ] CHANGELOG.md 已記錄測試變更
- [ ] 文檔格式一致
- [ ] 文檔內容準確
- [ ] 文檔時效性良好

#### 3. 測試結果分析檢查
- [ ] 測試覆蓋率已記錄
- [ ] 性能指標已記錄
- [ ] 發現的問題已記錄
- [ ] 解決方案已記錄
- [ ] 改進建議已記錄

#### 4. 質量保證檢查
- [ ] 歸檔內容完整
- [ ] 歸檔內容準確
- [ ] 歸檔內容時效
- [ ] 歸檔格式正確
- [ ] 歸檔工具使用正確