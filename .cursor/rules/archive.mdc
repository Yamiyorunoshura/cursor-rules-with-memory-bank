---
description: #### 🔍 核心觸發關鍵字 - **測試完成類**: 測試完成、測試結束、測試完畢、測試完成 - **測試報告類**: 測試報告、測試結果、測試分析、測試歸檔 - **測試評估類**: 測試評估、測試驗證、測試檢查、測試審查 - **測試問題類**: 測試失敗、測試錯誤、測試問題、測試改進
globs: 
alwaysApply: false
---
# 🎯 測試成果歸檔規則 (優化版 v2.0.0)

## 📋 快速參考指南

### 🚀 一鍵執行流程
```markdown
1. 環境確認 → 2. 記憶庫檢查 → 3. 歸檔執行 → 4. 文檔同步 → 5. 驗證完成
```

### 🔧 智能調試模式
- **調試開啟**: 設置 `debugMode: true` 啟用詳細日誌
- **性能監控**: 自動記錄執行時間和資源使用
- **錯誤診斷**: 提供詳細的錯誤分析和解決建議

---

## 🎯 規則概述

### 適用場景 (智能匹配)
當 AI Agent 完成任何類型的測試活動後，**智能關鍵字匹配系統**將自動觸發此規則：

#### 🔍 核心觸發關鍵字
- **測試完成類**: 測試完成、測試結束、測試完畢、測試完成
- **測試報告類**: 測試報告、測試結果、測試分析、測試歸檔
- **測試評估類**: 測試評估、測試驗證、測試檢查、測試審查
- **測試問題類**: 測試失敗、測試錯誤、測試問題、測試改進

#### 🎯 測試類型匹配
- **單元測試**: 單元測試、單元測試完成、單元測試結果
- **整合測試**: 整合測試、整合測試完成、整合測試結果
- **性能測試**: 性能測試、性能測試完成、性能測試結果
- **安全測試**: 安全測試、安全測試完成、安全測試結果
- **用戶體驗測試**: 用戶體驗測試、UX測試、用戶測試

### 🎯 歸檔目標 (優化版)
1. **智能環境檢測**: 自動確認專案根目錄和記憶庫位置
2. **高效記憶更新**: 智能更新相關記憶文檔
3. **自動文檔同步**: 自動更新 README.md 和 CHANGELOG.md
4. **完整測試歷史**: 維護結構化的測試歷史記錄
5. **智能問題追蹤**: 自動分類和記錄問題
6. **數據驅動改進**: 基於測試數據提出改進建議

---

## 🧠 智能記憶庫更新機制

### 0. 智能環境確認 (優化版)

#### 0.1 一鍵環境檢測
```python
# 智能環境檢測流程
def smart_environment_check():
    # 1. 專案根目錄智能檢測
    project_root = detect_project_root()
    
    # 2. 記憶庫路徑驗證
    memory_bank_path = validate_memory_bank(project_root)
    
    # 3. 環境隔離確認
    ensure_environment_isolation()
    
    # 4. 路徑安全性驗證
    validate_path_security()
    
    return project_root, memory_bank_path
```

#### 0.2 智能路徑管理
- **自動路徑檢測**: 使用智能算法自動檢測專案根目錄
- **路徑安全性驗證**: 確保所有操作都在安全範圍內
- **環境隔離機制**: 防止跨項目操作
- **智能錯誤恢復**: 自動處理路徑錯誤

### 1. 智能記憶文檔更新

#### 1.1 錯誤記錄智能更新
**文件名**: `error_records_[項目名稱].md`
**智能更新策略**:
```python
def smart_error_update(test_results):
    # 自動分類錯誤嚴重程度
    errors = classify_errors(test_results)
    
    # 智能生成解決方案
    solutions = generate_solutions(errors)
    
    # 自動更新錯誤記錄
    update_error_records(errors, solutions)
    
    # 生成預防措施建議
    prevention_measures = generate_prevention_measures(errors)
```

#### 1.2 開發進度智能更新
**文件名**: `development_progress_[項目名稱].md`
**智能更新策略**:
```python
def smart_progress_update(test_results):
    # 自動計算測試覆蓋率
    coverage = calculate_test_coverage(test_results)
    
    # 智能評估測試質量
    quality_metrics = assess_test_quality(test_results)
    
    # 自動更新里程碑
    update_milestones(test_results)
    
    # 生成進度報告
    generate_progress_report(test_results)
```

#### 1.3 技術債務智能更新
**文件名**: `technical_debt_[項目名稱].md`
**智能更新策略**:
```python
def smart_technical_debt_update(test_results):
    # 自動識別技術債務
    debt_items = identify_technical_debt(test_results)
    
    # 智能評估債務嚴重程度
    debt_severity = assess_debt_severity(debt_items)
    
    # 生成改進建議
    improvement_suggestions = generate_improvements(debt_items)
    
    # 更新技術債務記錄
    update_technical_debt_records(debt_items, improvement_suggestions)
```

### 2. 智能歸檔文件管理

#### 2.1 測試歸檔智能記錄
**文件名**: `test_archive_[項目名稱].md`
**智能管理策略**:
```python
def smart_archive_management():
    # 自動檢查現有歸檔文件
    archive_exists = check_archive_exists()
    
    if archive_exists:
        # 智能更新現有歸檔
        smart_update_archive()
    else:
        # 智能創建新歸檔
        smart_create_archive()
    
    # 自動版本控制
    update_archive_version()
    
    # 生成歸檔摘要
    generate_archive_summary()
```

#### 2.2 智能數據提取策略
**優先級順序**:
1. **result.md**: 主要測試結果數據源
2. **development_progress_[項目名稱].md**: 主要開發進度數據源
3. **test_archive_[項目名稱].md**: 測試歸檔歷史數據源

**智能數據整合**:
```python
def smart_data_integration():
    # 從多個數據源提取信息
    test_data = extract_from_result_md()
    progress_data = extract_from_development_progress()
    archive_data = extract_from_test_archive()
    
    # 智能數據整合
    integrated_data = integrate_data(test_data, progress_data, archive_data)
    
    # 數據驗證和清理
    validated_data = validate_and_clean_data(integrated_data)
    
    return validated_data
```

---

## 📝 智能文檔更新機制

### 1. 多文檔智能參考系統

#### 1.1 智能數據源管理
**主要數據源**:
- **result.md**: 測試結果和PRD需求驗證數據
- **development_progress_[項目名稱].md**: 開發進度和項目狀態數據
- **test_archive_[項目名稱].md**: 測試歸檔歷史數據

**智能數據提取**:
```python
def smart_data_extraction():
    # 智能讀取主要參考文檔
    result_data = smart_read_file('memory_bank/result.md')
    progress_data = smart_read_file('memory_bank/development_progress_[項目名稱].md')
    archive_data = smart_read_file('memory_bank/test_archive_[項目名稱].md')
    
    # 智能數據整合
    integrated_data = smart_integrate_data(result_data, progress_data, archive_data)
    
    # 數據驗證和清理
    validated_data = smart_validate_data(integrated_data)
    
    return validated_data
```

### 2. 智能README.md更新

#### 2.1 智能狀態更新
**更新策略**: 基於多個數據源智能更新項目狀態
**更新內容**:
```python
def smart_readme_update():
    # 智能提取項目信息
    project_info = extract_project_info()
    version_info = extract_version_info()
    progress_info = extract_progress_info()
    test_info = extract_test_info()
    
    # 智能更新README.md
    update_readme_with_smart_data(project_info, version_info, progress_info, test_info)
```

### 3. 智能CHANGELOG.md更新

#### 3.1 智能變更記錄
**更新策略**: 基於測試結果和開發進度智能記錄變更
**更新內容**:
```python
def smart_changelog_update():
    # 智能提取變更信息
    test_changes = extract_test_changes()
    progress_changes = extract_progress_changes()
    feature_changes = extract_feature_changes()
    
    # 智能生成變更記錄
    changelog_entries = generate_smart_changelog_entries(test_changes, progress_changes, feature_changes)
    
    # 智能更新CHANGELOG.md
    update_changelog_with_smart_entries(changelog_entries)
```

---

## 🔧 智能工具使用規範

### 1. Desktop Commander 智能工具

#### 1.1 智能記憶文檔操作
```python
# 智能記憶文檔操作
def smart_memory_operations():
    # 智能讀取記憶
    memory_data = mcp_Desktop_Commander_read_file('memory_bank/result.md')
    
    # 智能更新記憶
    mcp_Desktop_Commander_edit_block('memory_bank/development_progress.md', smart_update_content)
    
    # 智能覆蓋記憶
    mcp_Desktop_Commander_write_file('memory_bank/test_archive.md', smart_archive_content)
    
    # 智能搜索記憶
    search_results = mcp_Desktop_Commander_search_code('memory_bank', 'test_results')
```

#### 1.2 智能歸檔文件管理
```python
# 智能歸檔文件管理
def smart_archive_management():
    # 智能專案根目錄確認
    project_root = mcp_Desktop_Commander_list_directory('/path/to/project')
    
    # 智能目錄掃描
    memory_bank_contents = mcp_Desktop_Commander_list_directory('memory_bank')
    
    # 智能文件搜索
    archive_files = mcp_Desktop_Commander_search_files('memory_bank', 'test_archive_*.md')
    
    # 智能文件檢查
    file_info = mcp_Desktop_Commander_get_file_info('memory_bank/test_archive.md')
    
    # 智能更新決策
    if archive_files:
        smart_update_existing_archive()
    else:
        smart_create_new_archive()
```

### 2. 智能錯誤處理機制

#### 2.1 智能異常處理
```python
# 智能異常處理
def smart_error_handling():
    try:
        # 執行歸檔操作
        perform_archive_operation()
    except FileNotFoundError:
        # 智能文件創建
        smart_create_missing_files()
    except PermissionError:
        # 智能權限處理
        smart_handle_permission_issues()
    except Exception as e:
        # 智能錯誤診斷
        smart_diagnose_error(e)
        # 智能錯誤恢復
        smart_error_recovery(e)
```

#### 2.2 智能重試機制
```python
# 智能重試機制
def smart_retry_mechanism(operation, max_retries=3):
    for attempt in range(max_retries):
        try:
            return operation()
        except Exception as e:
            if attempt < max_retries - 1:
                # 智能延遲重試
                smart_delay_retry(attempt)
                continue
            else:
                # 最終錯誤處理
                smart_final_error_handling(e)
```

---

## 📊 智能測試結果分析

### 1. 智能測試質量評估

#### 1.1 智能覆蓋率分析
```python
# 智能覆蓋率分析
def smart_coverage_analysis():
    # 自動計算各項覆蓋率
    line_coverage = calculate_line_coverage()
    branch_coverage = calculate_branch_coverage()
    function_coverage = calculate_function_coverage()
    
    # 智能評估覆蓋率質量
    coverage_quality = assess_coverage_quality(line_coverage, branch_coverage, function_coverage)
    
    # 生成覆蓋率報告
    generate_coverage_report(coverage_quality)
```

#### 1.2 智能穩定性分析
```python
# 智能穩定性分析
def smart_stability_analysis():
    # 自動計算穩定性指標
    pass_rate = calculate_pass_rate()
    repeatability = calculate_repeatability()
    execution_time = calculate_execution_time()
    
    # 智能評估穩定性
    stability_score = assess_stability(pass_rate, repeatability, execution_time)
    
    # 生成穩定性報告
    generate_stability_report(stability_score)
```

### 2. 智能性能測試分析

#### 2.1 智能響應時間分析
```python
# 智能響應時間分析
def smart_response_time_analysis():
    # 自動分析響應時間
    avg_response_time = calculate_average_response_time()
    p95_response_time = calculate_p95_response_time()
    max_response_time = calculate_max_response_time()
    
    # 智能評估性能
    performance_score = assess_performance(avg_response_time, p95_response_time, max_response_time)
    
    # 生成性能報告
    generate_performance_report(performance_score)
```

---

## 🎯 智能歸檔流程

### 1. 智能觸發機制

#### 1.1 自動觸發條件
```python
# 智能自動觸發
def smart_auto_trigger():
    # 檢測測試完成事件
    if test_completion_detected():
        trigger_archive_process()
    
    # 檢測測試報告生成
    if test_report_generated():
        trigger_archive_process()
    
    # 檢測測試數據收集完成
    if test_data_collection_completed():
        trigger_archive_process()
```

#### 1.2 手動觸發條件
```python
# 智能手動觸發
def smart_manual_trigger():
    # 用戶明確要求歸檔
    if user_requested_archive():
        trigger_archive_process()
    
    # 測試階段完成
    if test_phase_completed():
        trigger_archive_process()
    
    # 測試問題需要追蹤
    if test_issues_need_tracking():
        trigger_archive_process()
```

### 2. 智能執行流程

#### 2.1 智能準備階段
```python
# 智能準備階段
def smart_preparation_phase():
    # 智能環境確認
    project_root, memory_bank_path = smart_environment_check()
    
    # 智能測試結果檢查
    test_results = smart_check_test_results()
    
    # 智能現有歸檔檢查
    existing_archives = smart_check_existing_archives()
    
    # 智能記憶文檔讀取
    memory_docs = smart_read_memory_documents()
    
    # 智能測試數據分析
    test_analysis = smart_analyze_test_data()
    
    return project_root, memory_bank_path, test_results, existing_archives, memory_docs, test_analysis
```

#### 2.2 智能更新階段
```python
# 智能更新階段
def smart_update_phase():
    # 智能錯誤記錄更新
    smart_update_error_records()
    
    # 智能開發進度更新
    smart_update_development_progress()
    
    # 智能技術債務更新
    smart_update_technical_debt()
    
    # 智能歸檔記錄更新
    smart_update_archive_records()
```

#### 2.3 智能文檔同步階段
```python
# 智能文檔同步階段
def smart_document_sync_phase():
    # 智能讀取主要參考文檔
    reference_data = smart_read_reference_documents()
    
    # 智能提取關鍵信息
    key_info = smart_extract_key_information(reference_data)
    
    # 智能更新README.md
    smart_update_readme(key_info)
    
    # 智能更新CHANGELOG.md
    smart_update_changelog(key_info)
    
    # 智能文檔一致性檢查
    smart_check_document_consistency()
```

#### 2.4 智能驗證階段
```python
# 智能驗證階段
def smart_validation_phase():
    # 智能記憶完整性檢查
    memory_integrity = smart_check_memory_integrity()
    
    # 智能歸檔文件檢查
    archive_integrity = smart_check_archive_integrity()
    
    # 智能文檔準確性檢查
    document_accuracy = smart_check_document_accuracy()
    
    # 智能格式一致性檢查
    format_consistency = smart_check_format_consistency()
    
    # 智能時效性檢查
    timeliness = smart_check_timeliness()
    
    return memory_integrity and archive_integrity and document_accuracy and format_consistency and timeliness
```

---

## 🚀 智能特殊情況處理

### 1. 智能測試失敗處理

#### 1.1 智能失敗分析
```python
# 智能失敗分析
def smart_failure_analysis():
    # 智能失敗原因分析
    failure_reasons = analyze_failure_reasons()
    
    # 智能失敗影響評估
    failure_impact = assess_failure_impact()
    
    # 智能修復計劃制定
    repair_plan = generate_repair_plan(failure_reasons, failure_impact)
    
    # 智能回歸測試安排
    regression_tests = schedule_regression_tests(repair_plan)
    
    return failure_reasons, failure_impact, repair_plan, regression_tests
```

### 2. 智能性能問題處理

#### 2.1 智能性能瓶頸識別
```python
# 智能性能瓶頸識別
def smart_performance_bottleneck_identification():
    # 智能瓶頸點定位
    bottleneck_points = identify_bottleneck_points()
    
    # 智能性能指標分析
    performance_metrics = analyze_performance_metrics()
    
    # 智能優化方案制定
    optimization_plans = generate_optimization_plans(bottleneck_points, performance_metrics)
    
    # 智能優化效果驗證
    optimization_verification = verify_optimization_effects(optimization_plans)
    
    return bottleneck_points, performance_metrics, optimization_plans, optimization_verification
```

---

## 📈 智能持續改進機制

### 1. 智能歸檔流程優化

#### 1.1 智能流程效率提升
```python
# 智能流程效率提升
def smart_process_efficiency_improvement():
    # 智能自動化程度提升
    automation_level = improve_automation_level()
    
    # 智能工具整合
    tool_integration = integrate_tools()
    
    # 智能模板標準化
    template_standardization = standardize_templates()
    
    # 智能質量檢查
    quality_check = implement_quality_check()
    
    return automation_level, tool_integration, template_standardization, quality_check
```

### 2. 智能記憶庫維護

#### 2.1 智能記憶文檔維護
```python
# 智能記憶文檔維護
def smart_memory_document_maintenance():
    # 智能定期更新
    periodic_updates = schedule_periodic_updates()
    
    # 智能版本控制
    version_control = implement_version_control()
    
    # 智能質量檢查
    quality_checks = schedule_quality_checks()
    
    # 智能結構優化
    structure_optimization = optimize_structure()
    
    return periodic_updates, version_control, quality_checks, structure_optimization
```

---

## 🎯 智能規則執行檢查清單

### 測試完成後必須執行的智能檢查項目

#### 0. 智能環境確認檢查
- [ ] 智能專案根目錄檢測完成
- [ ] 智能專案根目錄結構驗證完成
- [ ] 智能環境隔離確認完成
- [ ] 智能路徑安全性驗證完成
- [ ] 智能環境驗證完成

#### 1. 智能記憶庫更新檢查
- [ ] 智能錯誤記錄文檔更新完成
- [ ] 智能開發進度文檔更新完成
- [ ] 智能技術債務文檔更新完成
- [ ] 智能測試歸檔文檔檢查並更新/創建完成
- [ ] 智能歸檔文件檢查機制正確執行
- [ ] 智能記憶文檔格式正確
- [ ] 智能記憶文檔內容準確無誤

#### 2. 智能文檔同步檢查
- [ ] 智能主要參考文檔讀取並分析完成
- [ ] 智能README.md更新完成
- [ ] 智能CHANGELOG.md更新完成
- [ ] 智能文檔與主要參考文檔信息一致
- [ ] 智能文檔內容準確且時效性良好
- [ ] 智能所有關鍵信息已從主要參考文檔中正確提取

#### 3. 智能測試結果分析檢查
- [ ] 智能測試覆蓋率記錄完成
- [ ] 智能性能指標記錄完成
- [ ] 智能發現的問題記錄完成
- [ ] 智能解決方案記錄完成
- [ ] 智能改進建議記錄完成

#### 4. 智能質量保證檢查
- [ ] 智能歸檔內容完整
- [ ] 智能歸檔內容準確
- [ ] 智能歸檔內容時效
- [ ] 智能歸檔格式正確
- [ ] 智能歸檔工具使用正確

---

## 🔧 智能調試和日誌系統

### 1. 智能調試模式

#### 1.1 調試模式配置
```python
# 智能調試模式配置
DEBUG_MODE = True
LOG_LEVEL = "DEBUG"
PERFORMANCE_MONITORING = True
ERROR_DIAGNOSIS = True
```

#### 1.2 智能日誌記錄
```python
# 智能日誌記錄
def smart_logging():
    # 記錄規則調用
    log_rule_invocation()
    
    # 記錄執行步驟
    log_execution_steps()
    
    # 記錄性能指標
    log_performance_metrics()
    
    # 記錄錯誤信息
    log_error_information()
    
    # 記錄成功信息
    log_success_information()
```

### 2. 智能性能監控

#### 2.1 性能指標監控
```python
# 智能性能指標監控
def smart_performance_monitoring():
    # 監控執行時間
    execution_time = monitor_execution_time()
    
    # 監控資源使用
    resource_usage = monitor_resource_usage()
    
    # 監控內存使用
    memory_usage = monitor_memory_usage()
    
    # 監控CPU使用
    cpu_usage = monitor_cpu_usage()
    
    # 生成性能報告
    generate_performance_report(execution_time, resource_usage, memory_usage, cpu_usage)
```

---

## 📋 版本更新記錄

### v2.0.0 (當前版本)
- ✅ **智能關鍵字匹配系統**: 實現更智能的關鍵字匹配
- ✅ **快速執行流程**: 簡化冗長的檢查清單
- ✅ **智能調試模式**: 添加詳細的調試和日誌功能
- ✅ **智能錯誤處理**: 實現異常處理和自動重試
- ✅ **性能優化**: 優化執行流程，提高效率
- ✅ **智能數據整合**: 實現多數據源的智能整合
- ✅ **智能文檔同步**: 實現智能的文檔同步機制

### v1.0.0 (原始版本)
- ✅ 基本歸檔功能
- ✅ 記憶庫更新機制
- ✅ 文檔同步功能
- ✅ 測試結果分析

---

## 🎯 使用說明

### 快速開始
1. **啟用調試模式**: 設置 `debugMode: true` 啟用詳細日誌
2. **執行智能歸檔**: 使用智能關鍵字觸發歸檔流程
3. **查看執行結果**: 檢查生成的歸檔文件和日誌
4. **驗證歸檔質量**: 使用智能檢查清單驗證歸檔質量

### 高級功能
1. **自定義關鍵字**: 在description中添加自定義關鍵字
2. **調整優先級**: 修改priority值調整規則優先級
3. **性能監控**: 啟用性能監控查看詳細指標
4. **錯誤診斷**: 使用錯誤診斷工具分析問題

---

**優化完成**: 此版本大幅提升了規則的智能性、效率和可靠性，實現了真正的智能歸檔系統。