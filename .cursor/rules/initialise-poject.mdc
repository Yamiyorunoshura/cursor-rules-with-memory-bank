---
description: 分析項目 - 自動調用場景：項目分析、代碼審查、架構評估、技術債務分析、功能完整性檢查、性能優化分析、安全性評估、用戶體驗分析、業務價值分析、技術風險分析、記憶庫初始化、記憶庫更新、記憶差異檢測、記憶文檔創建、記憶文檔覆蓋、記憶庫維護、新項目啟動、項目重構、功能擴展、Bug修復分析、代碼優化、測試覆蓋率分析、代碼質量評估、設計模式分析、依賴關係分析、錯誤處理評估、文檔完整性檢查、測試質量評估、Web應用分析、移動應用分析、桌面應用分析、後端服務分析、數據分析項目、遊戲開發分析、迭代分析、版本升級分析、架構演進分析、技術棧評估、性能監控分析、安全審計分析
globs: 
alwaysApply: false
---
## 🎯 分析前準備階段

### 記憶庫檢查與創建機制

**當開始任何項目分析時，AI必須首先執行以下步驟：**

#### 0. 強制執行檢查清單（必須在每次分析開始時執行）
**AI必須在開始任何項目分析前，嚴格按照以下順序執行檢查：**

##### 0.1 專案根目錄強制驗證
- [ ] **第一步**：使用 `mcp_Desktop_Commander_list_directory` 檢測當前工作目錄
- [ ] **第二步**：確認當前路徑是否為正確的專案根目錄
- [ ] **第三步**：檢查目錄是否包含典型的項目文件（README.md、main.py、package.json 等）
- [ ] **第四步**：驗證專案根目錄結構的完整性和正確性
- [ ] **第五步**：確認在正確的項目環境中進行操作

##### 0.2 memory_bank 目錄強制驗證
- [ ] **第一步**：使用 `mcp_Desktop_Commander_list_directory` 檢查專案根目錄下是否存在 memory_bank/ 目錄
- [ ] **第二步**：驗證 memory_bank/ 目錄的可讀寫權限
- [ ] **第三步**：確認所有 memory_bank 操作都指向專案根目錄下的 memory_bank/ 目錄
- [ ] **第四步**：驗證路徑安全性和環境隔離性
- [ ] **第五步**：確保所有操作都在專案根目錄內進行

##### 0.3 路徑安全強制檢查
- [ ] **絕對路徑使用**：確保所有 memory_bank 操作都使用絕對路徑
- [ ] **路徑一致性**：確保所有操作都使用相同的專案根目錄路徑
- [ ] **環境隔離**：避免在專案根目錄外的任何位置進行操作
- [ ] **路徑驗證**：每次操作前都重新驗證專案根目錄路徑
- [ ] **安全確認**：確保操作環境的安全性和隔離性

**重要提醒**：以上檢查清單必須在每次項目分析開始時嚴格執行，任何步驟未完成都不得進行後續操作。

#### 1. 專案根目錄確認與驗證（強制優先步驟）
**AI必須在任何 memory_bank 操作前，嚴格按照以下順序執行：**

##### 1.1 專案根目錄檢測（第一步）
- **強制檢測**：使用 `mcp_Desktop_Commander_list_directory` 檢測當前工作目錄
- **路徑驗證**：確認當前路徑是否為正確的專案根目錄
- **結構識別**：檢查目錄是否包含典型的項目文件（如 README.md、main.py、package.json 等）
- **環境確認**：確保在正確的項目環境中進行操作

##### 1.2 專案根目錄結構驗證（第二步）
- **目錄結構檢查**：使用 `mcp_Desktop_Commander_list_directory` 驗證專案根目錄結構
- **關鍵文件確認**：檢查是否存在 memory_bank/ 目錄
- **路徑完整性**：確認專案根目錄包含完整的項目結構
- **環境隔離**：確保所有操作都在專案根目錄內進行，避免跨項目操作

##### 1.3 memory_bank 目錄驗證（第三步）
- **memory_bank 存在性檢查**：使用 `mcp_Desktop_Commander_list_directory` 檢查專案根目錄下是否存在 memory_bank/ 目錄
- **路徑安全驗證**：確保所有 memory_bank 操作都指向專案根目錄下的 memory_bank/ 目錄
- **目錄權限確認**：驗證 memory_bank/ 目錄的可讀寫權限
- **環境安全**：確保操作環境的安全性和隔離性

#### 2. 記憶庫狀態檢查（僅在專案根目錄確認後執行）
- **現有記憶檢查**：查看專案根目錄下的 memory_bank/ 目錄中是否已有該項目的記憶記錄
- **記憶類型識別**：根據項目類型識別相關的記憶分類
- **記憶完整性評估**：判斷現有記憶是否涵蓋項目的主要方面
- **記憶時效性檢查**：評估記憶是否與當前項目狀態同步
- **記憶差異比較**：分析現有記憶與當前項目狀態的差異
- **記憶衝突識別**：發現記憶文檔中的過時或不準確信息

#### 3. 記憶庫創建和更新策略（僅在專案根目錄確認後執行）
**AI必須根據項目類型在專案根目錄下創建或更新相應的記憶文檔：**

**強制執行原則**：
- **專案根目錄優先**：在任何 memory_bank 操作前，必須先確認專案根目錄結構
- **僅限專案根目錄**：所有記憶文檔操作僅限於專案根目錄的 memory_bank/ 目錄
- **先確認環境**：在進行任何操作前，必須先確認專案根目錄結構
- **路徑驗證**：確保所有路徑都指向專案根目錄下的 memory_bank/ 目錄
- **環境隔離**：避免在專案根目錄外的任何位置進行操作
- **環境安全**：確保操作環境的安全性和隔離性
- **強制路徑檢查**：每次 memory_bank 操作前都必須重新驗證專案根目錄路徑
- **絕對路徑使用**：使用絕對路徑進行所有 memory_bank 操作
- **路徑一致性**：確保所有操作都使用相同的專案根目錄路徑

##### 3.0 記憶差異處理機制
**當發現現有記憶與項目狀態不一致時，AI必須執行以下步驟：**

1. **差異識別**
   - 比較現有記憶文檔與當前項目狀態
   - 識別新增、修改、刪除的內容
   - 評估差異的嚴重程度和影響範圍
   - 記錄差異的具體位置和內容

2. **記憶更新決策**
   - **小幅度差異**：直接更新現有記憶文檔
   - **大幅度差異**：創建新的記憶文檔並標記版本
   - **結構性差異**：重新創建完整的記憶文檔
   - **衝突性差異**：創建衝突解決文檔

3. **版本控制策略**
   - 直接覆蓋舊版本記憶文檔
   - 使用標準命名格式（如：`project_overview_[項目名稱].md`）
   - 更新記憶索引和目錄
   - 確保記憶文檔與項目狀態完全同步

4. **記憶覆蓋機制**
   - **自動覆蓋**：當發現任何差異時直接覆蓋舊記憶文檔
   - **即時更新**：確保記憶文檔始終反映當前項目狀態
   - **直接替換**：不保留舊版本，直接使用新內容替換
   - **同步更新**：所有相關記憶文檔同步更新

##### 3.1 項目概覽記憶文檔
**文件名格式**：`project_overview_[項目名稱]_[日期].md`
**存儲位置**：專案根目錄下的 memory_bank/ 目錄
**強制路徑驗證**：每次操作前必須確認專案根目錄路徑
**內容必須包含**：
- 項目基本信息（名稱、版本、技術棧、項目類型）
- 核心功能/模組清單
- 項目架構圖解
- 主要依賴關係
- 開發環境配置
- 部署/運行方式說明
- 項目目標和價值

##### 3.2 技術架構記憶文檔
**文件名格式**：`technical_architecture_[項目名稱]_[日期].md`
**存儲位置**：專案根目錄下的 memory_bank/ 目錄
**強制路徑驗證**：每次操作前必須確認專案根目錄路徑
**內容必須包含**：
- 目錄結構分析
- 模組/組件間依賴關係
- 設計模式使用情況
- 數據存儲設計（數據庫/文件系統/API等）
- 接口設計（API/UI/CLI等）
- 錯誤處理機制
- 配置管理方式

##### 3.3 功能模組記憶文檔
**文件名格式**：`functional_modules_[項目名稱]_[日期].md`
**存儲位置**：專案根目錄下的 memory_bank/ 目錄
**強制路徑驗證**：每次操作前必須確認專案根目錄路徑
**內容必須包含**：
- 每個模組/功能的詳細說明
- 模組/功能間的協作關係
- 用戶界面/交互組件
- 配置管理方式
- 測試覆蓋情況
- 性能特點
- 使用場景

##### 3.4 技術債務記憶文檔
**文件名格式**：`technical_debt_[項目名稱]_[日期].md`
**存儲位置**：專案根目錄下的 memory_bank/ 目錄
**強制路徑驗證**：每次操作前必須確認專案根目錄路徑
**內容必須包含**：
- 已知問題清單
- 代碼/設計質量問題
- 性能瓶頸點
- 安全隱患
- 維護難度評估
- 擴展性限制
- 技術風險評估

##### 3.5 錯誤記錄記憶文檔
**文件名格式**：`error_records_[項目名稱]_[日期].md`
**存儲位置**：專案根目錄下的 memory_bank/ 目錄
**強制路徑驗證**：每次操作前必須確認專案根目錄路徑
**內容必須包含**：
- 歷史錯誤記錄
- 錯誤分類和嚴重程度
- 解決方案記錄
- 預防措施建議
- 錯誤趨勢分析
- 常見問題FAQ
- 故障排除指南

##### 3.6 開發進度記憶文檔
**文件名格式**：`development_progress_[項目名稱]_[日期].md`
**存儲位置**：專案根目錄下的 memory_bank/ 目錄
**強制路徑驗證**：每次操作前必須確認專案根目錄路徑
**內容必須包含**：
- 當前開發階段
- 已完成功能
- 進行中任務
- 計劃中功能
- 里程碑記錄
- 版本發布計劃
- 團隊協作狀態

##### 3.7 業務邏輯記憶文檔（適用於業務系統）
**文件名格式**：`business_logic_[項目名稱]_[日期].md`
**存儲位置**：專案根目錄下的 memory_bank/ 目錄
**強制路徑驗證**：每次操作前必須確認專案根目錄路徑
**內容必須包含**：
- 核心業務流程
- 業務規則和約束
- 數據流和處理邏輯
- 業務實體關係
- 權限和角色設計
- 業務指標和KPI
- 合規性要求

##### 3.8 用戶體驗記憶文檔（適用於用戶界面項目）
**文件名格式**：`user_experience_[項目名稱]_[日期].md`
**存儲位置**：專案根目錄下的 memory_bank/ 目錄
**強制路徑驗證**：每次操作前必須確認專案根目錄路徑
**內容必須包含**：
- 用戶旅程地圖
- 界面設計原則
- 交互模式分析
- 可訪問性考慮
- 響應式設計
- 用戶反饋記錄
- 可用性測試結果

## 🎯 通用分析目標

當進行任何類型項目分析時，AI應該遵循以下指引來確保全面且準確的分析：

### 核心分析維度
1. **代碼/設計質量分析** - 可讀性、可維護性、性能、最佳實踐
2. **架構設計分析** - 模組化程度、耦合度、擴展性、設計模式
3. **功能完整性分析** - 需求實現度、功能覆蓋率、用戶價值
4. **安全性分析** - 權限控制、數據保護、錯誤處理、安全漏洞
5. **性能分析** - 響應時間、資源使用、優化空間、可擴展性
6. **用戶體驗分析** - 易用性、可訪問性、用戶滿意度
7. **業務價值分析** - 目標達成度、ROI、市場競爭力
8. **技術風險分析** - 技術債務、依賴風險、維護成本

## 🔍 分析流程指引

### 第一階段：記憶庫初始化（強制專案根目錄優先）
1. **專案根目錄確認（強制第一步）**
   - 使用 `mcp_Desktop_Commander_list_directory` 確認專案根目錄結構
   - 確保在正確的項目環境中進行操作
   - 驗證專案根目錄包含典型的項目文件（README.md、main.py、package.json 等）
   - 確認專案根目錄路徑的正確性和完整性

2. **專案根目錄檢測（強制第二步）**
   - 使用 `mcp_Desktop_Commander_list_directory` 檢測專案根目錄
   - 確認專案根目錄包含正確的項目結構
   - 驗證專案根目錄的完整性和正確性
   - 檢查是否存在 memory_bank/ 目錄

3. **memory_bank 目錄驗證（強制第三步）**
   - 使用 `mcp_Desktop_Commander_list_directory` 檢查專案根目錄下是否存在 memory_bank/ 目錄
   - 驗證 memory_bank/ 目錄的可讀寫權限
   - 確保所有 memory_bank 操作都指向專案根目錄下的 memory_bank/ 目錄
   - 確認路徑安全性和環境隔離性

4. **記憶庫狀態檢查（僅在專案根目錄確認後執行）**
   - 檢查專案根目錄下的 memory_bank/ 目錄中的現有記憶文檔
   - 識別項目相關的記憶記錄
   - 評估記憶的完整性和時效性
   - 根據項目類型確定需要的記憶文檔類型
   - 比較現有記憶與當前項目狀態的差異
   - 確保所有操作都在專案根目錄內進行

2. **記憶差異分析**
   - 分析現有記憶文檔的準確性
   - 識別過時、錯誤或不完整的記憶內容
   - 評估記憶更新的緊急程度
   - 確定記憶更新策略（增量更新 vs 完全重寫）

4. **記憶文檔創建/更新（僅在專案根目錄確認後執行）**
   - 根據項目類型選擇合適的記憶文檔模板
   - 在專案根目錄下創建基礎記憶文檔（項目概覽、技術架構、功能模組等）
   - 根據項目特點在專案根目錄下創建專用記憶文檔（業務邏輯、用戶體驗等）
   - 使用 Desktop Commander 工具進行專案根目錄下的文件操作
   - 確保每個文檔包含詳細的項目信息
   - 處理記憶衝突和版本管理
   - 確保所有記憶文檔操作都在專案根目錄的 memory_bank/ 目錄內進行
   - 驗證所有路徑都指向專案根目錄下的正確位置
   - 每次操作前重新驗證專案根目錄路徑
   - 使用絕對路徑進行所有 memory_bank 操作

### 第二階段：項目概覽分析
1. **項目基本信息收集**
   - 讀取 README.md 了解項目背景和功能
   - 檢查配置文件（config.py, package.json, pom.xml等）了解配置結構
   - 分析項目目錄結構和文件組織
   - 識別主要技術棧和依賴關係
   - 了解項目類型和目標用戶

2. **核心功能/模組識別**
   - 掃描主要目錄結構（src/, lib/, modules/, cogs/等）
   - 分析每個模組/組件的主要功能
   - 理解模組/組件間的依賴關係
   - 評估模組化設計的合理性
   - 識別項目的核心價值和特色功能

### 第三階段：深度代碼/設計分析
1. **代碼/設計結構評估**
   - 檢查目錄結構是否符合最佳實踐
   - 分析模組化程度和耦合度
   - 評估代碼/設計組織的邏輯性
   - 識別重複代碼/設計和冗餘結構
   - 評估設計模式的使用合理性

2. **代碼/設計質量檢查**
   - 評估命名規範和可讀性
   - 檢查註釋完整性和文檔化程度
   - 分析錯誤處理機制的完善性
   - 評估代碼/設計複雜度和維護難度
   - 檢查是否符合行業標準和最佳實踐

### 第四階段：功能完整性驗證
1. **需求對應檢查**
   - 讀取需求文檔（PRD、用戶故事、規格說明等）了解需求規格
   - 對比實際實現與需求的一致性
   - 識別未實現或部分實現的功能
   - 評估功能實現的完整性和正確性
   - 檢查業務邏輯的準確性

2. **用戶體驗評估**
   - 分析界面設計的直觀性（適用於UI項目）
   - 評估操作流程的合理性
   - 檢查錯誤提示的友好性
   - 評估響應速度和性能表現
   - 分析用戶價值和滿意度

### 第五階段：技術架構分析
1. **設計模式評估**
   - 識別使用的設計模式和架構風格
   - 評估模式應用的合理性
   - 分析架構的可擴展性
   - 評估技術選型的適配性
   - 檢查架構的穩定性和可靠性

2. **安全性檢查**
   - 分析權限控制機制
   - 檢查數據驗證和清理
   - 評估錯誤處理的安全性
   - 識別潛在的安全漏洞
   - 評估數據保護和隱私安全

### 第六階段：性能優化分析
1. **性能基準測試**
   - 分析響應時間表現
   - 評估資源使用效率
   - 檢查並發處理能力
   - 識別性能瓶頸點
   - 評估可擴展性和負載能力

2. **優化建議制定**
   - 基於分析結果提出具體改進建議
   - 按優先級排序優化項目
   - 提供實施計劃和時間安排
   - 評估改進的預期效果
   - 考慮技術風險和實施成本

## 🛠️ 分析工具使用指引

### 記憶庫管理工具（強制專案根目錄優先）
1. **記憶文檔創建（僅在專案根目錄確認後執行）**
   - 使用 `mcp_Desktop_Commander_write_file` 在專案根目錄下創建記憶文檔
   - 使用 `mcp_Desktop_Commander_edit_block` 在專案根目錄下更新現有記憶
   - 使用 `mcp_Desktop_Commander_list_directory` 檢查專案根目錄下的記憶庫結構
   - 每次操作前必須重新驗證專案根目錄路徑

2. **記憶文檔讀取（僅在專案根目錄確認後執行）**
   - 使用 `mcp_Desktop_Commander_read_file` 讀取專案根目錄下的現有記憶
   - 使用 `mcp_Desktop_Commander_search_code` 搜索專案根目錄下的記憶內容
   - 使用 `mcp_Desktop_Commander_read_multiple_files` 批量讀取專案根目錄下的記憶
   - 每次操作前必須重新驗證專案根目錄路徑

3. **記憶文檔更新和覆蓋（僅在專案根目錄確認後執行）**
   - 使用 `mcp_Desktop_Commander_edit_block` 在專案根目錄下進行增量更新
   - 使用 `mcp_Desktop_Commander_write_file` 在專案根目錄下直接覆蓋舊記憶文檔
   - 使用 `mcp_Desktop_Commander_search_code` 比較專案根目錄下的記憶差異
   - 使用 `mcp_Desktop_Commander_list_directory` 管理專案根目錄下的記憶文檔結構
   - 每次操作前必須重新驗證專案根目錄路徑
   - 使用絕對路徑進行所有操作

### 文件讀取策略
1. **優先使用 Desktop Commander 工具**
   - 使用 `mcp_Desktop_Commander_read_file` 讀取關鍵文件
   - 使用 `mcp_Desktop_Commander_list_directory` 瀏覽目錄結構
   - 使用 `mcp_Desktop_Commander_search_code` 搜索特定代碼模式

2. **備用搜索工具**
   - 使用 `codebase_search` 進行語義搜索
   - 使用 `grep_search` 進行精確文本搜索
   - 使用 `file_search` 查找特定文件

### 代碼/設計分析重點
1. **核心配置文件**
   - 配置文件（config.py, package.json, pom.xml, docker-compose.yml等）
   - 入口文件（main.py, index.js, App.java等）
   - 依賴文件（requirements.txt, package.json, pom.xml等）

2. **功能模組分析**
   - 主要目錄結構（src/, lib/, modules/, cogs/, components/等）
   - 模組/組件間的依賴關係
   - 數據操作和接口設計
   - 用戶界面/交互組件

3. **測試和文檔**
   - tests/ 目錄的測試覆蓋率
   - docs/ 目錄的文檔完整性
   - README 和 CHANGELOG 的更新情況
   - API文檔和用戶手冊

## 📊 分析報告結構指引

### 報告必須包含的章節
1. **執行摘要**
   - 分析範圍和目標
   - 主要發現和關鍵問題
   - 改進建議的優先級
   - 項目類型和特點概述

2. **記憶庫狀態**
   - 現有記憶文檔清單
   - 記憶完整性和時效性評估
   - 新創建的記憶文檔說明
   - 記憶文檔的適用性評估
   - 記憶差異分析結果
   - 記憶更新和覆蓋記錄

3. **詳細分析結果**
   - 代碼/設計質量評估
   - 架構設計分析
   - 功能完整性檢查
   - 安全性評估
   - 性能分析
   - 用戶體驗評估（適用時）
   - 業務價值分析（適用時）

4. **改進建議**
   - 高優先級修復項目
   - 中優先級改進項目
   - 低優先級優化項目
   - 技術風險緩解建議

5. **實施計劃**
   - 時間安排和里程碑
   - 資源需求和風險評估
   - 預期效果和成功指標
   - 監控和評估機制

## 🎯 分析質量標準

### 記憶庫管理標準
- **完整性**: 確保所有必要的記憶文檔都已創建
- **準確性**: 記憶內容與實際項目狀態一致
- **時效性**: 記憶文檔定期更新
- **結構化**: 記憶文檔組織清晰，易於查找
- **適用性**: 根據項目類型選擇合適的記憶文檔模板
- **可擴展性**: 記憶文檔結構支持未來擴展

### 分析深度要求
- **全面性**: 涵蓋所有主要模組和功能
- **準確性**: 基於實際代碼/設計而非推測
- **實用性**: 提供可操作的改進建議
- **優先級**: 按影響程度和實施難度排序
- **適應性**: 根據項目類型調整分析深度
- **前瞻性**: 考慮未來發展和擴展需求

### 報告質量要求
- **結構清晰**: 邏輯分明，易於理解
- **數據支撐**: 提供具體的數據和證據
- **建議具體**: 避免空泛的建議，提供具體實施方案
- **可追蹤**: 建議可測量和驗證

## 🔄 持續改進機制

### 記憶庫維護
1. **定期更新**: 每次分析後更新相關記憶文檔
2. **版本控制**: 保持記憶文檔的版本歷史
3. **質量檢查**: 定期檢查記憶文檔的準確性
4. **結構優化**: 根據項目發展調整記憶文檔結構
5. **模板更新**: 根據新項目類型更新記憶文檔模板
6. **知識沉澱**: 將分析經驗轉化為可重用的知識模板
7. **差異檢測**: 自動檢測記憶與項目狀態的差異
8. **衝突解決**: 處理記憶衝突和版本不一致問題
9. **覆蓋機制**: 當發現任何差異時直接覆蓋舊記憶文檔
10. **即時同步**: 確保記憶文檔始終反映當前項目狀態

### 分析迭代
1. **初步分析**: 快速識別主要問題
2. **深度分析**: 針對關鍵問題深入調查
3. **驗證分析**: 確認分析結果的準確性
4. **跟進分析**: 檢查改進建議的實施效果

### 知識積累
- 記錄常見問題和解決方案
- 建立最佳實踐庫
- 更新分析工具和方法
- 優化分析流程和效率
- 建立項目類型特定的分析模板
- 沉澱跨項目的通用分析經驗

## 🔄 記憶更新和覆蓋機制

### 記憶差異檢測流程

#### 1. 差異識別階段
- **內容比較**: 逐項比較現有記憶與當前項目狀態
- **結構分析**: 檢查記憶文檔結構是否與項目結構匹配
- **版本對比**: 比較記憶文檔版本與項目版本的一致性
- **完整性檢查**: 評估記憶文檔是否涵蓋項目的所有重要方面

#### 2. 差異分類標準
- **任何差異**: 直接覆蓋舊記憶文檔
- **結構性差異**: 重新組織記憶文檔結構
- **內容差異**: 更新記憶文檔內容
- **新增差異**: 添加新的記憶文檔
- **刪除差異**: 移除過時的記憶文檔

#### 3. 記憶覆蓋決策機制
- **自動覆蓋觸發條件**:
  - 發現任何項目狀態變化
  - 記憶文檔與項目狀態不一致
  - 項目結構或功能發生變更
  - 技術棧或依賴關係變更
  - 發現記憶文檔中的錯誤

- **即時覆蓋策略**:
  - 直接覆蓋舊記憶文檔
  - 不保留任何舊版本
  - 確保記憶文檔與項目狀態完全同步
  - 簡化記憶管理流程

#### 4. 版本管理策略
- **命名規範**: `[文檔類型]_[項目名稱].md`
- **直接覆蓋**: 新記憶文檔直接替換舊版本
- **索引更新**: 自動更新記憶文檔索引和目錄
- **即時同步**: 確保記憶文檔與項目狀態完全同步

### 記憶更新工具和流程

#### 1. 更新工具使用
- **差異檢測**: 使用 `mcp_Desktop_Commander_search_code` 比較記憶內容
- **直接覆蓋**: 使用 `mcp_Desktop_Commander_write_file` 直接覆蓋舊記憶文檔
- **文件管理**: 使用 `mcp_Desktop_Commander_list_directory` 管理記憶文檔結構
- **索引更新**: 使用 `mcp_Desktop_Commander_edit_block` 更新索引

#### 2. 更新流程標準
1. **檢測階段**: 自動掃描項目變化
2. **分析階段**: 評估變化對記憶的影響
3. **決策階段**: 確定更新策略
4. **執行階段**: 直接覆蓋舊記憶文檔
5. **驗證階段**: 確認記憶文檔的準確性
6. **同步階段**: 確保記憶與項目狀態同步

#### 3. 質量保證機制
- **準確性檢查**: 確保記憶內容與項目狀態一致
- **完整性驗證**: 確認記憶文檔涵蓋所有重要信息
- **一致性檢查**: 確保不同記憶文檔之間的一致性
- **時效性評估**: 定期檢查記憶文檔的時效性

## 🎯 項目類型適配指南

### 不同項目類型的分析重點

#### 1. Web應用項目
**重點關注**：
- 前端框架和UI組件
- 後端API設計和數據庫
- 用戶體驗和響應式設計
- 安全性（XSS、CSRF、SQL注入）
- 性能優化（CDN、緩存、壓縮）

**記憶文檔模板**：
- 項目概覽、技術架構、功能模組
- 用戶體驗、業務邏輯、錯誤記錄

#### 2. 移動應用項目
**重點關注**：
- 平台特定代碼（iOS/Android）
- 用戶界面和交互設計
- 性能優化和電池使用
- 數據同步和離線功能
- 應用商店合規性

**記憶文檔模板**：
- 項目概覽、技術架構、功能模組
- 用戶體驗、錯誤記錄、開發進度

#### 3. 桌面應用項目
**重點關注**：
- 跨平台兼容性
- 本地資源管理
- 用戶界面設計
- 安裝和更新機制
- 系統集成能力

**記憶文檔模板**：
- 項目概覽、技術架構、功能模組
- 用戶體驗、錯誤記錄、開發進度

#### 4. 後端服務項目
**重點關注**：
- API設計和文檔
- 數據庫設計和優化
- 微服務架構
- 安全性和認證
- 監控和日誌

**記憶文檔模板**：
- 項目概覽、技術架構、功能模組
- 業務邏輯、錯誤記錄、開發進度

#### 5. 數據分析項目
**重點關注**：
- 數據處理流程
- 算法和模型
- 可視化設計
- 數據質量控制
- 計算性能優化

**記憶文檔模板**：
- 項目概覽、技術架構、功能模組
- 業務邏輯、錯誤記錄、開發進度

#### 6. 遊戲開發項目
**重點關注**：
- 遊戲引擎和框架
- 遊戲邏輯和機制
- 圖形和音頻處理
- 性能優化
- 用戶體驗和可玩性

**記憶文檔模板**：
- 項目概覽、技術架構、功能模組
- 用戶體驗、錯誤記錄、開發進度

### 通用分析框架

#### 技術棧分析
- **前端技術**: React、Vue、Angular、原生技術
- **後端技術**: Node.js、Python、Java、.NET、Go
- **數據庫**: SQL、NoSQL、緩存系統
- **部署**: 雲服務、容器化、CI/CD
- **監控**: 日誌、指標、告警

#### 架構模式分析
- **單體架構**: 適用於小型項目
- **微服務架構**: 適用於大型分散式系統
- **事件驅動架構**: 適用於異步處理
- **分層架構**: 適用於業務邏輯複雜的系統
- **插件架構**: 適用於可擴展的系統

#### 質量維度分析
- **功能質量**: 需求實現度、功能完整性
- **性能質量**: 響應時間、吞吐量、資源使用
- **安全質量**: 數據保護、訪問控制、漏洞防護
- **可用性質量**: 穩定性、可維護性、可擴展性
- **用戶體驗質量**: 易用性、可訪問性、滿意度
## 🚨 強制執行原則總結

### 專案根目錄優先原則（最高優先級）
1. **任何 memory_bank 操作前必須先確認專案根目錄**
2. **使用 `mcp_Desktop_Commander_list_directory` 驗證專案根目錄結構**
3. **確保所有操作都在專案根目錄內進行**
4. **使用絕對路徑進行所有 memory_bank 操作**
5. **每次操作前重新驗證專案根目錄路徑**

### 記憶庫操作安全原則
1. **僅限專案根目錄的 memory_bank/ 目錄**
2. **避免跨項目操作和環境污染**
3. **確保路徑安全性和環境隔離性**
4. **使用 Desktop Commander 工具進行所有文件操作**
5. **每次操作前進行路徑驗證**

### 強制檢查清單（每次分析必須執行）
- [ ] 專案根目錄檢測和驗證
- [ ] memory_bank 目錄存在性檢查
- [ ] 路徑安全性和權限驗證
- [ ] 環境隔離性確認
- [ ] 絕對路徑使用確認

**記住**：任何違反以上原則的操作都將導致分析失敗或數據丟失。嚴格遵循專案根目錄優先原則是確保分析成功和數據安全的基本要求。
