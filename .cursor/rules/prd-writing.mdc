---
description: 撰寫PRD文檔/需求文檔 - 自動調用場景：PRD撰寫、需求文檔、產品需求文檔、功能規格文檔、技術需求文檔、系統需求文檔、用戶需求文檔、業務需求文檔、產品規格文檔、功能設計文檔、系統設計文檔、架構設計文檔、技術設計文檔、需求分析文檔、功能分析文檔、系統分析文檔、業務分析文檔、產品分析文檔、需求收集文檔、需求整理文檔、需求驗證文檔、需求確認文檔、需求變更文檔、需求追蹤文檔、需求管理文檔、產品規劃文檔、功能規劃文檔、系統規劃文檔、技術規劃文檔、項目規劃文檔、開發規劃文檔、實施規劃文檔、部署規劃文檔、維護規劃文檔、升級規劃文檔、重構規劃文檔、擴展規劃文檔、優化規劃文檔、測試規劃文檔、驗收規劃文檔、交付規劃文檔、發布規劃文檔、版本規劃文檔、迭代規劃文檔、里程碑規劃文檔、時間規劃文檔、資源規劃文檔、成本規劃文檔、風險規劃文檔、質量規劃文檔、安全規劃文檔、性能規劃文檔、可用性規劃文檔、可維護性規劃文檔、可擴展性規劃文檔、可重用性規劃文檔、可移植性規劃文檔、可測試性規劃文檔、可讀性規劃文檔、可理解性規劃文檔、可修改性規劃文檔、可調試性規劃文檔、可部署性規劃文檔、可運維性規劃文檔、可監控性規劃文檔、可告警性規劃文檔、可恢復性規劃文檔、可備份性規劃文檔、可還原性規劃文檔、可遷移性規劃文檔、可升級性規劃文檔、可降級性規劃文檔、可回滾性規劃文檔、可切換性規劃文檔、可隔離性規劃文檔、可並行性規劃文檔、可串行性規劃文檔、可異步性規劃文檔、可同步性規劃文檔、可並發性規劃文檔、可分佈性規劃文檔、可集中性規劃文檔、可分散性規劃文檔、可聚合性規劃文檔、可分解性規劃文檔、可組合性規劃文檔、可拆分性規劃文檔、可合併性規劃文檔、可分離性規劃文檔、可連接性規劃文檔、可斷開性規劃文檔、可啟動性規劃文檔、可停止性規劃文檔、可暫停性規劃文檔、可恢復性規劃文檔、可重啟性規劃文檔、可重置性規劃文檔、可清除性規劃文檔、可清理性規劃文檔、可整理性規劃文檔、可歸檔性規劃文檔、可備份性規劃文檔、可還原性規劃文檔、可遷移性規劃文檔、可升級性規劃文檔、可降級性規劃文檔、可回滾性規劃文檔、可切換性規劃文檔、可隔離性規劃文檔、可並行性規劃文檔、可串行性規劃文檔、可異步性規劃文檔、可同步性規劃文檔、可並發性規劃文檔、可分佈性規劃文檔、可集中性規劃文檔、可分散性規劃文檔、可聚合性規劃文檔、可分解性規劃文檔、可組合性規劃文檔、可拆分性規劃文檔、可合併性規劃文檔、可分離性規劃文檔、可連接性規劃文檔、可斷開性規劃文檔、可啟動性規劃文檔、可停止性規劃文檔、可暫停性規劃文檔、可恢復性規劃文檔、可重啟性規劃文檔、可重置性規劃文檔、可清除性規劃文檔、可清理性規劃文檔、可整理性規劃文檔、可歸檔性規劃文檔
globs: 
alwaysApply: false
---
## 🚨 核心限制與指導原則

### 🔐 智能權限驗證機制
**AI Agent 權限驗證智能判斷系統**：

1. **權限驗證觸發條件**（滿足任一條件即需要權限驗證）：
   - ✅ 項目涉及多用戶系統
   - ✅ 功能包含敏感數據操作
   - ✅ 需要角色分級管理
   - ✅ 涉及管理員權限控制
   - ✅ 包含用戶身份驗證需求
   - ✅ 需要訪問控制機制

2. **權限驗證跳過條件**（滿足所有條件可跳過權限驗證）：
   - ✅ 單用戶系統
   - ✅ 純展示型功能
   - ✅ 無敏感數據操作
   - ✅ 無角色分級需求
   - ✅ 無管理員權限需求
   - ✅ 無身份驗證需求

3. **權限驗證決策流程**：
   ```
   分析項目需求 → 評估權限需求 → 智能決定是否包含權限設計
   ```

### 🔒 絕對禁止程式碼修改
**AI在撰寫PRD文檔時，必須嚴格遵守以下原則：**

1. **絕對禁止修改程式碼**：
   - 不得修改任何現有的程式碼文件
   - 不得創建新的程式碼文件
   - 不得重構或重寫任何程式碼
   - 不得調整任何程式碼結構

2. **僅限文檔撰寫**：
   - 只允許創建和修改PRD文檔
   - 只允許在memory_bank目錄中操作文檔
   - 只允許使用文檔相關的工具
   - 禁止使用任何可能影響程式碼的工具

3. **文檔範圍限制**：
   - 僅限於需求分析、功能規格、技術設計等文檔內容
   - 不涉及實際的程式碼實現
   - 不涉及程式碼測試或部署
   - 不涉及程式碼優化或重構

---

## 🎯 優化版PRD結構模板

### 📋 標準PRD文檔結構

```markdown
# PRD 統一文檔 - [項目名稱]

## 📋 文檔信息
**文檔版本**: v[版本號]  
**創建日期**: [YYYY-MM-DD]  
**最後更新**: [YYYY-MM-DD]  
**負責人**: [負責人]  
**審核人**: [審核人]  
**文檔狀態**: [草稿/審核中/已批准]  
**存儲位置**: 專案根目錄下的 memory_bank/prd.md

## 📋 項目概述

### 背景
[描述項目開發的背景和動機，包含現有問題和解決方案]

### 目標
[明確列出項目開發的目標，使用SMART原則]

### 範圍
[定義項目的邊界和限制，明確包含和不包含的內容]

## 🎯 核心需求

### 1. [需求分類1]
**現況**: [客觀描述當前狀態和問題]
**需求**: 
- [具體需求1]
- [具體需求2]
- [具體需求3]

**優先級**: [高/中/低]
**依賴關係**: [列出相關依賴]
**驗收標準**: [明確的驗收條件]

### 2. [需求分類2]
**現況**: [客觀描述當前狀態和問題]
**需求**: 
- [具體需求1]
- [具體需求2]
- [具體需求3]

**優先級**: [高/中/低]
**依賴關係**: [列出相關依賴]
**驗收標準**: [明確的驗收條件]

## 🔧 功能規格

### 核心功能模塊

#### 1. [功能模塊1名稱]
**功能描述**: [簡要描述功能的核心價值]
**主要功能**:
- [功能點1]
- [功能點2]
- [功能點3]

**權限要求**:
- 查看: [權限描述]
- 修改: [權限描述]

**接口定義**:
```[語言]
# 定義模塊間接口
def module_interface(input_data):
    """
    功能描述
    參數: input_data - 輸入數據格式
    返回: output_data - 輸出數據格式
    異常: 可能的異常情況
    """
    pass
```

**性能要求**:
- 響應時間: [具體時間要求]
- 並發處理: [並發用戶數]
- 數據處理: [數據量要求]

#### 2. [功能模塊2名稱]
**功能描述**: [簡要描述功能]
**主要功能**:
- [功能點1]
- [功能點2]
- [功能點3]

**權限要求**:
- 查看: [權限描述]
- 修改: [權限描述]

**接口定義**:
```[語言]
# 定義模塊間接口
def module_interface(input_data):
    pass
```

**性能要求**:
- 響應時間: [具體時間要求]
- 並發處理: [並發用戶數]
- 數據處理: [數據量要求]

### 權限設計

#### 🎯 智能權限驗證判斷機制
**AI Agent 權限驗證撰寫指導原則**：

1. **權限驗證觸發條件**：
   - 項目涉及多用戶系統
   - 功能包含敏感數據操作
   - 需要角色分級管理
   - 涉及管理員權限控制
   - 包含用戶身份驗證需求
   - 需要訪問控制機制

2. **權限驗證跳過條件**：
   - 單用戶系統
   - 純展示型功能
   - 無敏感數據操作
   - 無角色分級需求
   - 無管理員權限需求
   - 無身份驗證需求

3. **權限驗證判斷流程**：
   ```
   分析項目需求 → 評估權限需求 → 決定是否包含權限設計
   ```

#### 權限分層架構（僅在需要時包含）
```
1. [權限等級1] ([權限名稱])
   - 適用對象: [適用範圍]
   - 功能範圍: [功能描述]
   - 限制條件: [權限限制]

2. [權限等級2] ([權限名稱])
   - 適用對象: [適用範圍]
   - 功能範圍: [功能描述]
   - 限制條件: [權限限制]
```

#### 權限檢查邏輯（僅在需要時包含）
```[語言]
def check_permission(user, action_type, resource=None):
    """
    權限檢查邏輯
    參數: user - 用戶對象, action_type - 操作類型, resource - 資源對象
    返回: bool - 是否有權限
    """
    if action_type == "[權限類型1]":
        return [檢查邏輯]
    
    elif action_type == "[權限類型2]":
        return [檢查邏輯]
    
    return False
```

## 🎨 系統架構設計

### 架構圖
```
[ASCII圖表或文字描述系統架構]
```

### 組件關係
- [組件1] → [組件2]: [關係描述]
- [組件2] → [組件3]: [關係描述]
- [組件3] → [組件1]: [關係描述]

### 數據流程
```
[數據流程圖或文字描述]
```

## 🔧 技術實現

### 架構設計
```
[架構圖或文字描述]
```

### 核心組件
1. **[組件1名稱]**: [組件描述]
   - 主要職責: [具體職責描述]
   - 依賴關係: [依賴的其他組件]
   - 性能要求: [性能指標]
   - 技術選型: [具體技術實現]

2. **[組件2名稱]**: [組件描述]
   - 主要職責: [具體職責描述]
   - 依賴關係: [依賴的其他組件]
   - 性能要求: [性能指標]
   - 技術選型: [具體技術實現]

3. **[組件3名稱]**: [組件描述]
   - 主要職責: [具體職責描述]
   - 依賴關係: [依賴的其他組件]
   - 性能要求: [性能指標]
   - 技術選型: [具體技術實現]

### 數據流程
```
[數據流程圖或文字描述]
```

### 錯誤處理機制
```[語言]
# 錯誤處理示例
def handle_error(error_type, context):
    """
    統一錯誤處理機制
    參數: error_type - 錯誤類型, context - 錯誤上下文
    """
    if error_type == "權限錯誤":
        return {"status": "error", "message": "權限不足"}
    elif error_type == "數據錯誤":
        return {"status": "error", "message": "數據格式錯誤"}
    # 其他錯誤處理...
```

## 📊 測試計劃

### 功能測試
- [ ] [測試項目1] - [測試描述]
- [ ] [測試項目2] - [測試描述]
- [ ] [測試項目3] - [測試描述]

### 權限測試
- [ ] [測試項目1] - [測試描述]
- [ ] [測試項目2] - [測試描述]
- [ ] [測試項目3] - [測試描述]

### 性能測試
- [ ] [測試項目1] - [測試描述]
- [ ] [測試項目2] - [測試描述]
- [ ] [測試項目3] - [測試描述]

### 用戶體驗測試
- [ ] [測試項目1] - [測試描述]
- [ ] [測試項目2] - [測試描述]
- [ ] [測試項目3] - [測試描述]

## 🚀 實施計劃

### Phase 1: [階段1名稱] ([時間範圍])
- [ ] [任務1] - [任務描述]
- [ ] [任務2] - [任務描述]
- [ ] [任務3] - [任務描述]

### Phase 2: [階段2名稱] ([時間範圍])
- [ ] [任務1] - [任務描述]
- [ ] [任務2] - [任務描述]
- [ ] [任務3] - [任務描述]

### Phase 3: [階段3名稱] ([時間範圍])
- [ ] [任務1] - [任務描述]
- [ ] [任務2] - [任務描述]
- [ ] [任務3] - [任務描述]

### 風險評估與應對
| 風險類型 | 風險描述 | 影響程度 | 應對措施 |
|---|---|---|---|
| 技術風險 | [具體技術風險] | [高/中/低] | [具體應對措施] |
| 時間風險 | [時間相關風險] | [高/中/低] | [具體應對措施] |
| 資源風險 | [資源相關風險] | [高/中/低] | [具體應對措施] |

## 📋 驗收標準

### 功能驗收
- [ ] [驗收標準1] - [具體標準]
- [ ] [驗收標準2] - [具體標準]
- [ ] [驗收標準3] - [具體標準]

### 性能驗收
- [ ] [驗收標準1] - [具體標準]
- [ ] [驗收標準2] - [具體標準]
- [ ] [驗收標準3] - [具體標準]

### 用戶體驗驗收
- [ ] [驗收標準1] - [具體標準]
- [ ] [驗收標準2] - [具體標準]
- [ ] [驗收標準3] - [具體標準]

## 🔄 後續優化

### 短期優化 ([時間範圍])
- [優化項目1] - [優化描述]
- [優化項目2] - [優化描述]
- [優化項目3] - [優化描述]

### 中期優化 ([時間範圍])
- [優化項目1] - [優化描述]
- [優化項目2] - [優化描述]
- [優化項目3] - [優化描述]

### 長期優化 ([時間範圍])
- [優化項目1] - [優化描述]
- [優化項目2] - [優化描述]
- [優化項目3] - [優化描述]

---

## 📝 更新歷史

### v[版本號] ([YYYY-MM-DD])
- 初始版本創建
- 包含完整的PRD結構和內容

### v[版本號] ([YYYY-MM-DD])
- [具體更新內容]
- [修改的功能或章節]

## 📋 文檔信息
**文檔版本**: v[版本號]  
**創建日期**: [YYYY-MM-DD]  
**最後更新**: [YYYY-MM-DD]  
**負責人**: [負責人]  
**審核人**: [審核人]  
**文檔狀態**: [草稿/審核中/已批准]  
**存儲位置**: 專案根目錄下的 memory_bank/prd.md
```

---

## 🤖 AI 專用操作指引

### AI PRD 創建流程
```markdown
# AI PRD 創建標準流程

## 📋 前置檢查
1. **確認用戶需求**：明確用戶要求創建PRD的具體內容
2. **分析項目類型**：確定是新項目、功能擴展、系統重構等
3. **檢查現有文檔**：使用Desktop Commander檢查memory_bank/prd.md是否存在
4. **評估項目複雜度**：根據功能複雜度、影響範圍、開發工作量、業務重要性進行評估

## 🎯 統一命名確定
- **所有PRD文檔統一命名為**: `prd.md`
- **存儲位置**: 專案根目錄下的 `memory_bank/prd.md`
- **版本管理**: 在文檔內部記錄版本歷史

## 🔐 智能權限驗證判斷
1. **權限需求分析**：
   - 評估項目是否涉及多用戶系統
   - 檢查是否包含敏感數據操作
   - 判斷是否需要角色分級管理
   - 確認是否涉及管理員權限控制
   - 分析是否需要用戶身份驗證
   - 評估是否需要訪問控制機制

2. **權限驗證決策**：
   - **需要權限驗證**：包含完整的權限設計章節
   - **不需要權限驗證**：跳過權限設計章節，專注於功能規格

3. **權限驗證標準**：
   ```
   多用戶系統 + 敏感數據 + 角色分級 + 管理員權限 = 需要權限驗證
   單用戶系統 + 純展示功能 + 無敏感數據 = 跳過權限驗證
   ```

## 📝 文檔創建/覆蓋
1. **使用Desktop Commander**：使用mcp_Desktop_Commander_write_file創建文檔
2. **分塊寫入**：將PRD內容分為25-30行的塊進行寫入
3. **版本信息**：在文檔開頭包含版本信息和更新歷史
4. **智能結構**：根據權限需求分析結果決定是否包含權限設計章節
5. **質量檢查**：確保每個章節都有具體的內容和標準

## 🔄 後續操作
1. **記錄操作**：在文檔中記錄創建/更新時間和操作類型
2. **通知用戶**：告知用戶文檔已創建/更新在memory_bank/prd.md
3. **提供路徑**：提供文檔的完整路徑供用戶查看
4. **質量驗證**：確保文檔符合優化版PRD結構要求
```

### AI 記憶庫管理規範
```markdown
# AI 記憶庫PRD管理規範

## 📁 目錄結構
- 所有PRD文檔統一存放在memory_bank/prd.md
- 使用統一的命名規範：prd.md
- 保持目錄結構的整潔和一致性

## 🔄 版本管理
- **自動覆蓋**：新版本自動覆蓋舊版本，無需手動備份
- **版本記錄**：在文檔中記錄版本歷史和更新內容
- **時間戳記**：記錄每次創建和更新的具體時間
- **操作類型**：標記是創建新文檔還是更新現有文檔

## 📋 文檔標準
- **版本信息**：文檔開頭必須包含版本號和更新日期
- **項目信息**：包含項目名稱、負責人、審核人
- **更新歷史**：記錄每次重大更新的內容和日期
- **文檔狀態**：標明文檔的當前狀態（草稿/審核中/已批准）
- **存儲位置**：明確標明文檔在專案根目錄下的 memory_bank/prd.md

## 🛠️ 工具使用
- **Desktop Commander優先**：所有文件操作優先使用Desktop Commander工具
- **分塊寫入**：使用mcp_Desktop_Commander_write_file進行分塊文件寫入
- **精確編輯**：使用mcp_Desktop_Commander_edit_block進行精確代碼修改
- **目錄檢查**：使用mcp_Desktop_Commander_list_directory檢查現有文件
```

### AI 操作檢查清單
```markdown
# AI PRD 操作檢查清單

## 📋 創建前檢查
- [ ] 確認用戶PRD需求明確
- [ ] 分析項目類型和功能範圍
- [ ] 檢查memory_bank/prd.md是否存在
- [ ] 確定使用統一的prd.md命名
- [ ] 準備Desktop Commander工具
- [ ] 評估項目複雜度是否符合PRD撰寫標準
- [ ] **智能權限驗證判斷**：
  - [ ] 評估是否涉及多用戶系統
  - [ ] 檢查是否包含敏感數據操作
  - [ ] 判斷是否需要角色分級管理
  - [ ] 確認是否涉及管理員權限控制
  - [ ] 分析是否需要用戶身份驗證
  - [ ] 決定是否包含權限設計章節

## 📝 創建中檢查
- [ ] 使用正確的Desktop Commander工具
- [ ] 分塊寫入PRD內容（25-30行/塊）
- [ ] **智能結構決定**：
  - [ ] 根據權限需求分析結果決定文檔結構
  - [ ] 需要權限驗證時包含完整權限設計章節
  - [ ] 不需要權限驗證時跳過權限設計章節
- [ ] 添加版本信息和更新歷史
- [ ] 記錄創建/更新時間和操作類型
- [ ] 確保每個章節都有具體的內容和標準
- [ ] 驗證文檔結構符合優化版模板

## 🔄 創建後檢查
- [ ] 確認文檔已成功創建/更新在memory_bank/prd.md
- [ ] 驗證文檔內容完整性和準確性
- [ ] 通知用戶文檔創建/更新完成
- [ ] 提供文檔的完整路徑
- [ ] 記錄操作到記憶庫中
- [ ] 確保文檔質量符合優化版PRD標準
```