---
description: 生成prompt；撰寫prompt - 自動調用場景：PRD文檔解析、需求分析、功能規格制定、技術要求定義、實現指導撰寫、驗收標準制定、測試要求規劃、風險控制設計、文檔要求定義、開發進度更新、項目路徑檢測、記憶庫掃描、PRD文件選擇、智能內容生成、標準化模板應用、品質控制檢查、工具使用指導、最佳實踐應用、模組開發規劃、架構設計指導、接口定義、數據流設計、依賴關係分析、測試策略制定、性能要求定義、安全要求制定、兼容性要求、可維護性設計、可擴展性規劃、可重用性設計、可移植性考慮、可測試性設計、可讀性要求、可理解性設計、可修改性規劃、可調試性設計、可部署性考慮、可運維性設計、可監控性規劃、可告警性設計、可恢復性考慮、可備份性設計、可還原性規劃、可遷移性考慮、可升級性設計、可降級性規劃、可回滾性設計、可切換性考慮、可隔離性設計、可並行性規劃、可串行性設計、可異步性考慮、可同步性設計、可並發性規劃、可分佈性設計、可集中性考慮、可分散性設計、可聚合性規劃、可分解性設計、可組合性考慮、可拆分性設計、可合併性規劃、可分離性設計、可連接性考慮、可斷開性設計、可啟動性規劃、可停止性設計、可暫停性考慮、可恢復性設計、可重啟性規劃、可重置性設計、可清除性考慮、可清理性設計、可整理性規劃、可歸檔性設計、可備份性考慮、可還原性設計、可遷移性規劃、可升級性考慮、可降級性設計、可回滾性規劃、可切換性考慮、可隔離性設計、可並行性規劃、可串行性設計、可異步性考慮、可同步性設計、可並發性規劃、可分佈性設計、可集中性考慮、可分散性設計、可聚合性規劃、可分解性設計、可組合性考慮、可拆分性設計、可合併性規劃、可分離性設計、可連接性考慮、可斷開性設計、可啟動性規劃、可停止性設計、可暫停性考慮、可恢復性設計、可重啟性規劃、可重置性設計、可清除性考慮、可清理性設計、可整理性規劃、可歸檔性設計
globs: 
alwaysApply: false
---
## 🔧 AI Agent 工具使用指南

### 1. **Desktop Commander 工具優先使用**

#### 文件操作工具
- **讀取文件**: 使用 `mcp_Desktop_Commander_read_file` 進行高效文件讀取
- **寫入文件**: 使用 `mcp_Desktop_Commander_write_file` 進行分塊文件寫入（25-30行為一塊）
- **精確編輯**: 使用 `mcp_Desktop_Commander_edit_block` 進行手術式代碼修改
- **目錄瀏覽**: 使用 `mcp_Desktop_Commander_list_directory` 進行目錄結構查看

#### 代碼搜索工具
- **語義搜索**: 使用 `mcp_Desktop_Commander_search_code` 進行快速代碼搜索
- **文件搜索**: 使用 `mcp_Desktop_Commander_search_files` 進行文件名搜索
- **多文件讀取**: 使用 `mcp_Desktop_Commander_read_multiple_files` 同時讀取多個文件

#### 進程管理工具
- **數據分析**: 使用 `mcp_Desktop_Commander_start_process` 啟動 Python REPL 進行數據分析
- **交互式操作**: 使用 `mcp_Desktop_Commander_interact_with_process` 進行交互式代碼執行
- **進程監控**: 使用 `mcp_Desktop_Commander_list_sessions` 監控活動進程

### 2. **Context7 工具使用**

#### 文檔查詢工具
- **庫文檔查詢**: 使用 `mcp_Context7_resolve-library-id` 獲取準確的庫 ID
- **詳細文檔**: 使用 `mcp_Context7_get-library-docs` 獲取詳細文檔
- **使用場景**: 在編寫代碼前自動查詢相關庫的最新文檔和最佳實踐

### 3. **備用工具**

#### 語義搜索
- 使用 `codebase_search` 進行語義搜索
- 使用 `grep_search` 進行精確文本搜索
- 使用 `edit_file` 進行文件編輯
- 使用 `run_terminal_cmd` 進行測試和部署

## 🔄 智能提示詞生成流程

### 階段一：PRD文件檢測與解析

#### 1.1 自動PRD文件檢測
```markdown
**工具使用**: mcp_Desktop_Commander_list_directory
**目標**: 掃描專案根目錄下的記憶庫目錄，檢測所有PRD文件
**操作步驟**:
1. 使用 Desktop Commander 檢測專案根目錄
2. 使用 Desktop Commander 列出專案根目錄下的 memory_bank 目錄內容
3. 識別包含 'prd' 關鍵字的 .md 文件
4. 選擇最新修改的PRD文件作為基礎
```

#### 1.2 PRD內容解析
```markdown
**工具使用**: mcp_Desktop_Commander_read_file
**目標**: 解析PRD文件內容，提取關鍵信息
**操作步驟**:
1. 讀取選定的PRD文件內容
2. 提取項目名稱、核心需求、技術規格等關鍵信息
3. 分析PRD結構，識別各個章節的內容
```

### 階段二：智能內容生成

#### 2.1 基於PRD的提示詞結構
```markdown
**標準模板結構**:
# [項目名稱] 開發提示詞

## 🎯 功能概述
### 核心需求
[從PRD提取的核心功能描述]

### 業務價值
[功能實現的業務價值和目標]

### 用戶場景
[主要使用場景和用戶流程]

## 📋 技術要求
### 功能規格
- **主要功能**: [核心功能點]
- **次要功能**: [輔助功能點]
- **可選功能**: [擴展功能點]

### 技術規格
[具體的技術實現細節]

### 性能要求
[性能指標和限制]

## 🔧 實現指導
[分階段實現計劃]

## ✅ 驗收標準
[功能、性能、安全驗收標準]

## 🧪 測試要求
[單元測試、整合測試、性能測試要求]

## 🚨 風險控制
[技術風險和依賴風險控制措施]

## 📝 文檔要求
[代碼文檔和用戶文檔要求]
```

#### 2.2 智能內容格式化
```markdown
**格式化規則**:
1. **需求格式化**: 將PRD中的需求點轉換為清晰的列表格式
2. **技術規格格式化**: 將技術細節轉換為結構化的規格說明
3. **驗收標準格式化**: 將驗收條件轉換為可測試的檢查清單
4. **實現指導格式化**: 將實施計劃轉換為具體的實現步驟
```

### 階段三：文件管理與保存

#### 3.1 智能文件管理
```markdown
**工具使用**: mcp_Desktop_Commander_write_file
**操作步驟**:
1. 檢測專案根目錄
2. 檢查專案根目錄下的記憶庫之中是否存在舊的 prompt.md 文件
3. 如果存在，直接覆蓋而非創建新的
4. 使用分塊寫入方式在專案根目錄下生成新的 prompt.md 文件
5. 確保文件內容完整且格式正確
```

#### 3.2 標準化文件命名
```markdown
**文件命名規範**:
- 主文件: prompt.md
```

## 📊 智能品質控制標準

### 1. **提示詞品質指標**
- **完整性**: 涵蓋PRD的所有要求，包括功能、性能、安全
- **準確性**: 技術規格準確無誤，包含具體的實現細節
- **可執行性**: 提示詞可直接用於開發，包含具體的步驟和示例
- **一致性**: 與專案規範保持一致，遵循統一的標準
- **可測試性**: 包含可測試的驗收標準和測試策略

### 2. **智能驗證檢查清單**
- [ ] 需求覆蓋率達到100%，包括所有功能點和優先級
- [ ] 技術規格明確具體，包含實現細節和示例
- [ ] 實現步驟邏輯合理，包含具體的指導和代碼示例
- [ ] 驗收標準可測量，包含具體的指標和測試方法
- [ ] 測試要求完整，包含單元測試、整合測試、性能測試
- [ ] 錯誤處理完善，包含異常處理和日誌記錄
- [ ] 文檔同步更新，包含代碼文檔和用戶文檔
- [ ] 風險控制措施具體，包含風險識別和控制策略
- [ ] 開發進度文檔更新要求明確，包含更新內容和工具使用

## 🎯 智能特殊情況處理

### 1. **複雜功能處理**
當遇到複雜功能時：
1. **智能分解需求**: 將複雜功能分解為可管理的子功能
2. **分階段實現**: 設計可測試的分階段實現計劃
3. **依賴管理**: 明確標示功能間的依賴關係和影響範圍
4. **風險控制**: 識別並控制實現風險，準備備選方案

### 2. **現有功能修改**
當需要修改現有功能時：
1. **影響評估**: 全面評估修改對現有功能的影響
2. **向後兼容**: 確保修改不破壞現有功能和API
3. **測試策略**: 設計相應的回歸測試和兼容性測試
4. **文檔更新**: 同步更新相關文檔和用戶指南

### 3. **新模組開發**
當需要開發新模組時：
1. **架構設計**: 設計模組的整體架構和職責邊界
2. **接口定義**: 定義與其他模組的接口和數據流
3. **數據流設計**: 設計完整的數據流和處理邏輯
4. **測試計劃**: 制定完整的測試計劃和覆蓋策略

## 📝 智能提示詞撰寫規範

### 1. **語言規範**
- **使用繁體中文**: 所有提示詞內容使用繁體中文
- **技術術語統一**: 使用專案內已定義的術語和命名規範
- **描述精確**: 避免模糊不清的描述，使用具體的指標和示例
- **結構清晰**: 使用清晰的標題層級和邏輯結構

### 2. **格式規範**
- **結構化標記**: 使用清晰的標題和子標題層級
- **代碼塊標記**: 使用適當的代碼塊標記和語言標識
- **列表格式**: 使用統一的列表格式和檢查清單
- **表格格式**: 使用表格展示複雜的數據結構和對比

### 3. **內容規範**
- **功能優先**: 優先描述功能需求和業務價值
- **技術細節**: 包含必要的技術實現細節和示例
- **測試導向**: 包含可測試的驗收標準和測試策略
- **風險控制**: 包含風險識別和控制措施

## 🚀 智能最佳實踐

### 1. **智能提示詞撰寫技巧**
1. **從PRD開始**: 始終以PRD文檔為基礎，確保需求準確理解
2. **模組化思維**: 將複雜需求分解為可管理的模組和階段
3. **測試驅動**: 以測試要求指導實現設計，確保可測試性
4. **迭代優化**: 根據實際情況不斷優化提示詞和實現策略
5. **風險預控**: 提前識別和控制實現風險，準備備選方案

### 2. **智能常見問題避免**
1. **避免模糊描述**: 使用具體明確的描述和具體的指標
2. **避免技術跳躍**: 確保技術規格可執行，包含具體的實現細節
3. **避免忽略測試**: 始終包含完整的測試要求和覆蓋策略
4. **避免架構衝突**: 確保與現有架構兼容，遵循統一的設計模式
5. **避免忽略風險**: 提前識別和控制實現風險，準備應對措施

## 📈 智能持續改進

### 1. **智能反饋機制**
- **開發反饋**: 收集開發過程中的反饋，優化實現策略
- **測試反饋**: 收集測試過程中的反饋，改進測試策略
- **用戶反饋**: 收集用戶使用過程中的反饋，優化用戶體驗
- **性能反饋**: 收集性能監控數據，優化性能表現

### 2. **智能文檔更新**
- **定期審查**: 定期審查和更新規則文檔，保持與時俱進
- **版本管理**: 使用版本管理追蹤變更，保持文檔的歷史記錄
- **知識沉澱**: 將經驗沉澱為最佳實踐，形成知識庫
- **工具整合**: 持續整合新的工具和技術，提升效率

## 🔧 智能工具整合指導

### 1. **Desktop Commander 工具使用**
- **文件操作**: 使用 Desktop Commander 進行高效的文件讀寫和編輯
- **代碼編輯**: 使用精確的編輯工具進行代碼修改和重構
- **進程管理**: 使用進程管理工具進行數據分析和測試執行
- **搜索功能**: 使用強大的搜索工具進行代碼和文檔搜索
- **目錄管理**: 使用目錄管理工具進行項目結構分析和優化
- **動態項目檢測**: 使用 `mcp_Desktop_Commander_list_directory` 進行項目結構檢測
- **路徑驗證**: 使用 Desktop Commander 工具驗證項目路徑的正確性

### 2. **Context7 工具使用**
- **文檔查詢**: 自動查詢最新庫文檔和最佳實踐，確保技術先進性
- **API 使用**: 獲取準確的 API 使用示例和最佳實踐
- **錯誤解決**: 查詢庫相關錯誤的解決方案和常見問題
- **版本升級**: 獲取庫版本升級的遷移指南和變更說明
- **最佳實踐**: 獲取最新的編程最佳實踐和設計模式

### 3. **工具協同使用策略**
- **優先級策略**: 優先使用 Desktop Commander 進行文件操作和代碼編輯
- **文檔查詢策略**: 在編寫代碼前先使用 Context7 查詢相關文檔
- **測試策略**: 使用 Desktop Commander 的進程管理工具進行測試執行
- **搜索策略**: 結合使用 Desktop Commander 和 Context7 進行全面的代碼和文檔搜索
- **項目檢測策略**: 使用 Desktop Commander 進行動態項目路徑檢測和驗證

### 4. **動態項目檢測實現**
```markdown
**檢測步驟**:
1. **當前目錄檢測**: 使用 `mcp_Desktop_Commander_list_directory` 檢測當前目錄內容
2. **項目文件識別**: 檢查是否包含 main.py, cogs/, tests/, memory_bank/ 等關鍵文件
3. **記憶庫驗證**: 檢查 memory_bank/ 目錄是否存在且包含 PRD 文件
4. **路徑確認**: 確認檢測到的路徑為正確的項目根目錄
5. **錯誤處理**: 如果檢測失敗，提供清晰的錯誤信息和解決建議

**實現代碼示例**:
```python
# 項目檢測邏輯
def detect_project_root():
    current_path = get_current_directory()
    while current_path != "/":
        if is_project_root(current_path):
            return current_path
        current_path = get_parent_directory(current_path)
    return None

def is_project_root(path):
    required_files = ["main.py", "cogs/", "tests/", "memory_bank/"]
    return all(file_exists(path, file) for file in required_files)
```
```

## 📋 智能實用模板

### 1. **智能標準提示詞模板**
```markdown
# [功能名稱] 開發提示詞

## 🎯 功能概述
### 核心需求
[從PRD提取的核心功能描述]

### 業務價值
[功能實現的業務價值和目標]

### 用戶場景
[主要使用場景和用戶流程]

## 📋 技術要求
### 功能規格
- **主要功能**: [核心功能點]
- **次要功能**: [輔助功能點]
- **可選功能**: [擴展功能點]

### 技術規格
- **數據結構**: [具體的數據結構定義]
- **API設計**: [API接口設計和參數]
- **業務邏輯**: [核心業務邏輯流程]
- **錯誤處理**: [錯誤處理策略]

### 性能要求
- **響應時間**: [預期響應時間]
- **並發處理**: [並發用戶數]
- **資源使用**: [內存、CPU限制]

## 🔧 實現指導
### 階段1: [基礎功能實現]
[具體實現指導和代碼示例]

### 階段2: [核心功能實現]
[具體實現指導和代碼示例]

### 階段3: [優化與測試]
[性能優化和測試指導]

### 階段4: [文檔更新與進度記錄]
- 更新相關代碼文檔和用戶文檔
- 更新開發進度文檔 `memory_bank/development_progress_discord_adr_bot.md`
- 記錄開發成果和技術成就
- 沉澱開發經驗和教訓

## ✅ 驗收標準
### 功能驗收
- [ ] [功能驗收條件1]
- [ ] [功能驗收條件2]

### 性能驗收
- [ ] [性能驗收條件1]
- [ ] [性能驗收條件2]

### 安全驗收
- [ ] [安全驗收條件1]
- [ ] [安全驗收條件2]

### 開發進度文檔更新驗收
- [ ] 開發進度文檔已更新，記錄本次開發成果
- [ ] 技術成就和性能指標已同步更新
- [ ] 里程碑和版本信息已記錄
- [ ] 開發經驗和教訓已沉澱到文檔中

## 🧪 測試要求
### 單元測試
- [測試範圍1] - [預期覆蓋率]
- [測試範圍2] - [預期覆蓋率]

### 整合測試
- [測試場景1] - [測試數據]
- [測試場景2] - [測試數據]

### 性能測試
- [性能測試場景1]
- [性能測試場景2]

## 📝 開發進度更新要求

### 開發完成後必須更新
- **開發進度文檔**: 完成開發後必須更新 `memory_bank/development_progress_discord_adr_bot.md`
- **更新內容**: 記錄本次開發的功能、修復的問題、達成的里程碑
- **更新時間**: 在功能測試通過後立即更新
- **更新格式**: 遵循現有文檔格式，保持一致性

### 更新檢查清單
- [ ] 更新當前開發階段狀態
- [ ] 記錄完成的功能和修復的問題
- [ ] 更新技術成就和性能指標
- [ ] 更新進行中任務的進度
- [ ] 更新計劃中功能的狀態
- [ ] 記錄新的里程碑和版本信息
- [ ] 更新質量指標和用戶體驗評估
- [ ] 記錄開發過程中的經驗和教訓

### 更新工具使用
- **文件讀取**: 使用 `mcp_Desktop_Commander_read_file` 讀取現有進度文檔
- **文件編輯**: 使用 `mcp_Desktop_Commander_edit_block` 進行精確更新
- **內容驗證**: 確保更新內容準確且符合文檔格式
- **版本追蹤**: 記錄更新時間和更新原因

## 🚨 風險控制
### 技術風險
- [風險點1] - [控制措施]
- [風險點2] - [控制措施]

### 依賴風險
- [依賴風險1] - [備選方案]
- [依賴風險2] - [備選方案]

### 文檔更新風險
- **進度文檔未及時更新** - 控制措施：在開發完成後立即更新，建立檢查清單
- **文檔內容不準確** - 控制措施：使用 Desktop Commander 工具進行精確更新和驗證
- **文檔格式不一致** - 控制措施：遵循現有文檔格式，保持一致性

## 📝 文檔要求
### 代碼文檔
- [文檔要求1]
- [文檔要求2]

### 用戶文檔
- [文檔要求1]
- [文檔要求2]

### 開發進度文檔更新
- **必須更新**: 完成開發後必須更新 `memory_bank/development_progress_discord_adr_bot.md`
- **更新內容**: 
  - 記錄本次開發完成的功能和修復的問題
  - 更新當前開發階段狀態和里程碑
  - 更新技術成就和性能指標
  - 記錄開發過程中的經驗和教訓
- **更新時間**: 在功能測試通過後立即更新
- **更新工具**: 使用 Desktop Commander 工具進行文件讀取和編輯
- **格式要求**: 遵循現有文檔格式，保持一致性
```

### 2. **智能模組開發模板**
```markdown
# [模組名稱] 模組開發

## 🏗️ 架構設計
### 模組職責
[模組的主要職責和邊界]

### 模組結構
```
[模組結構圖或描述]
```

### 接口定義
```python
# 主要接口
def main_function(param1: type, param2: type) -> return_type:
    """
    功能描述
    
    Args:
        param1: 參數描述
        param2: 參數描述
        
    Returns:
        返回值描述
        
    Raises:
        ExceptionType: 異常描述
    """
    pass
```

## 📊 數據流設計
### 輸入數據
- [數據類型1] - [數據格式和驗證]
- [數據類型2] - [數據格式和驗證]

### 處理邏輯
- [處理步驟1] - [具體實現]
- [處理步驟2] - [具體實現]

### 輸出數據
- [輸出格式1] - [數據結構]
- [輸出格式2] - [數據結構]

## 🔗 依賴關係
### 前置依賴
- [依賴模組1] - [依賴原因]
- [依賴模組2] - [依賴原因]

### 後續影響
- [影響模組1] - [影響範圍]
- [影響模組2] - [影響範圍]

### 外部依賴
- [外部庫1] - [版本要求]
- [外部庫2] - [版本要求]

## 🧪 測試策略
### 單元測試
- [測試用例1] - [測試數據和預期結果]
- [測試用例2] - [測試數據和預期結果]

### 整合測試
- [測試場景1] - [測試流程]
- [測試場景2] - [測試流程]

### 性能測試
- [性能測試1] - [性能指標]
- [性能測試2] - [性能指標]
```

## 🎯 智能調用時機指南

### 1. **明確的調用時機**
- **項目整體評估**: 代碼質量、架構設計、功能完整性分析
- **特定問題診斷**: 性能問題、安全漏洞、可維護性檢查
- **改進建議需求**: 優化建議、重構計劃、架構改進
- **技術債務評估**: 重構需求、複雜度分析、測試覆蓋率
- **新功能開發前分析**: 影響評估、擴展性分析、依賴檢查

### 2. **不需要調用的情況**
- 簡單的語法錯誤修復
- 單個文件的局部修改
- 純文檔更新
- 配置參數調整
- 簡單的bug修復

### 3. **分析深度選擇**
- **快速掃描** (5-10分鐘): 初步了解項目狀況
- **標準分析** (15-30分鐘): 常規項目評估
- **深度分析** (30-60分鐘): 重大決策或問題診斷

## 🔄 自動化執行指令

### 0. **動態項目檢測機制**
```markdown
**項目識別策略**:
1. **工作目錄檢測**: 使用 Desktop Commander 檢測當前工作目錄
2. **項目結構驗證**: 檢查目錄是否包含項目關鍵文件（main.py, cogs/, tests/ 等）
3. **記憶庫檢測**: 檢查是否存在 memory_bank/ 目錄
4. **PRD文件檢測**: 檢查 memory_bank/ 目錄中是否存在 PRD 文件
5. **路徑確認**: 確認檢測到的路徑為正確的項目根目錄

**檢測流程**:
1. 使用 `mcp_Desktop_Commander_list_directory` 檢測當前目錄結構
2. 檢查是否包含項目關鍵文件（main.py, cogs/, tests/, memory_bank/ 等）
3. 如果當前目錄不是項目根目錄，向上層目錄搜索直到找到項目根目錄
4. 驗證找到的目錄確實包含完整的項目結構
5. 確認 memory_bank/ 目錄存在且包含 PRD 文件
```

### 1. **動態項目路徑檢測與PRD檢測**
當用戶要求生成prompt時，AI應自動執行以下流程：

1. **動態檢測當前項目路徑**: 
   - 使用 Desktop Commander 的 `list_directory` 工具檢測當前工作目錄
   - 自動識別項目根目錄（包含 main.py, cogs/, tests/ 等關鍵文件的目錄）
   - 驗證該路徑包含正確的項目文件結構
   - 避免使用 URL 編碼的目錄路徑

2. **掃描記憶庫**: 使用 Desktop Commander 自動檢測當前項目的 `memory_bank/` 目錄中的所有PRD文件
3. **選擇最新PRD**: 選擇最新修改的PRD文件作為基礎
4. **解析PRD內容**: 使用 Desktop Commander 讀取並解析PRD文件內容
5. **檢查舊文件**: 檢查當前項目路徑下是否存在 `prompt.md` 文件，如果存在則備份
6. **生成新Prompt**: 基於PRD內容生成標準化的 `prompt.md` 文件
7. **驗證完整性**: 確保生成的prompt包含所有必要的信息
8. **路徑驗證**: 最終確認文件儲存於正確的項目路徑下

### 2. **標準化文件管理**
- **文件名標準化**: 所有prompt文件統一命名為 `prompt.md`
- **動態路徑標準化**: 使用 Desktop Commander 工具動態檢測並使用當前項目的正確路徑
- **自動備份機制**: 覆蓋舊文件前自動創建時間戳備份
- **版本追蹤**: 記錄prompt文件的生成歷史和變更原因
- **錯誤檢測**: 在儲存前檢測是否為正確的項目路徑，避免儲存到錯誤目錄
- **通用性**: 支持任何項目的記憶庫目錄結構

### 3. **智能內容生成**
- **PRD驅動**: 完全基於記憶庫中的PRD文件內容生成prompt
- **結構化輸出**: 使用標準化的模板結構確保一致性
- **內容完整性**: 確保包含功能需求、技術規格、實現指導、驗收標準等所有必要部分
- **動態路徑驗證**: 使用 Desktop Commander 工具動態驗證當前項目的正確路徑和文件操作
- **錯誤預防**: 在生成過程中持續檢查路徑正確性，避免儲存到錯誤目錄
- **通用性**: 支持任何項目的PRD結構和記憶庫組織方式
- **進度文檔更新**: 確保生成的prompt包含開發進度文檔更新要求

## 📊 智能品質控制

### 1. **內容完整性檢查**
- [ ] 是否涵蓋PRD的所有功能點和優先級
- [ ] 是否包含所有技術要求和性能指標
- [ ] 是否考慮了完整的錯誤處理和日誌記錄
- [ ] 是否包含全面的測試要求和覆蓋率
- [ ] 是否考慮了安全性和兼容性要求

### 2. **技術準確性檢查**
- [ ] 技術規格是否準確且包含具體實現細節
- [ ] API設計是否合理且包含完整的參數說明
- [ ] 數據結構定義是否清晰且符合實際需求
- [ ] 錯誤處理策略是否完善且包含具體的異常類型
- [ ] 性能要求是否具體且可測量

### 3. **可執行性檢查**
- [ ] 實現步驟是否邏輯合理且可測試
- [ ] 代碼示例是否正確且可直接使用
- [ ] 驗收標準是否可測量且包含具體指標
- [ ] 測試策略是否完整且包含具體的測試用例
- [ ] 風險控制措施是否具體且可執行

## 🚀 智能最佳實踐總結

### 1. **工具使用最佳實踐**
- **優先使用 Desktop Commander**: 在所有文件操作、代碼編輯和進程管理中優先使用
- **自動文檔查詢**: 在編寫代碼時自動使用 Context7 獲取最新庫文檔
- **智能搜索策略**: 結合使用多種搜索工具進行全面的代碼和文檔搜索
- **進程管理**: 使用進程管理工具進行數據分析和測試執行

### 2. **內容生成最佳實踐**
- **PRD驅動**: 始終以PRD文檔為基礎，確保需求準確理解
- **模組化思維**: 將複雜需求分解為可管理的模組和階段
- **測試驅動**: 以測試要求指導實現設計，確保可測試性
- **風險預控**: 提前識別和控制實現風險，準備備選方案

### 3. **品質控制最佳實踐**
- **完整性檢查**: 確保涵蓋所有必要的功能點和技術要求
- **準確性驗證**: 確保技術規格準確且包含具體實現細節
- **可執行性測試**: 確保提示詞可直接用於開發，包含具體步驟
- **一致性維護**: 確保與專案規範保持一致，遵循統一標準
```

---

### 📁 文件儲存規範
- **動態項目識別**: 由本規則產生的所有 prompt.md 檔案，必須儲存於專案根目錄下的 memory_bank/ 目錄
- **自動路徑檢測**: 使用 Desktop Commander 工具自動檢測專案根目錄路徑
- **項目驗證**: 在儲存前必須驗證專案根目錄包含正確的項目文件（如 main.py, cogs/, tests/ 等）
- **禁止錯誤儲存**: 禁止將 prompt.md 儲存於 URL 編碼目錄或其他非本專案目錄
- **目錄檢查**: 若專案根目錄下的 memory_bank/ 目錄不存在，需自動建立後再儲存
- **路徑確認**: 使用 Desktop Commander 工具確認正確的專案根目錄路徑後再進行文件操作
- **文檔管理**: 生成的prompt註明不需要生成一份歸檔文件
