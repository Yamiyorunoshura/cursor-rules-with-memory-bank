---
description: ### 適用範圍 - 單元測試結果分析 - 整合測試結果分析 - 性能測試結果分析 - 安全測試結果分析 - 用戶驗收測試結果分析  ## 🚀 分析觸發條件  ### 1. 明確的測試分析需求 當用戶要求以下任何類型的測試分析時，應立即啟動分析流程： - "分析測試結果" - "檢查測試覆蓋率" - "評估測試質量" - "生成測試建議" - "分析測試失敗原因" - "評估測試完整性"  ### 2. 測試執行後 - 自動化測試完成後 - 手動測試完成後 - 測試報告生成後 - 測試覆蓋率檢查後  ### 3. 測試問題診斷 - 測試失敗分析 - 測試不穩定問題 - 測試性能問題 - 測試環境問題
globs: 
alwaysApply: false
---
# 🧪 測試結果分析專用規則文檔

## 📋 規則概述

### 目的
本規則文檔專門用於指導AI agent分析測試結果，並在記憶庫中生成針對性的建議工作文件，專注於測試發現的問題和改進建議。

## 📊 測試分析維度框架

### 1. 測試覆蓋率分析

#### 代碼覆蓋率
- **行覆蓋率**: 檢查代碼行執行覆蓋情況
- **分支覆蓋率**: 檢查條件分支覆蓋情況
- **函數覆蓋率**: 檢查函數調用覆蓋情況
- **模組覆蓋率**: 檢查模組級別覆蓋情況

#### 功能覆蓋率
- **核心功能**: 檢查核心功能測試覆蓋
- **邊界情況**: 檢查邊界條件測試
- **錯誤處理**: 檢查錯誤處理測試
- **異常情況**: 檢查異常流程測試

### 2. 測試質量評估

#### 測試穩定性
- **測試通過率**: 分析測試通過/失敗比例
- **測試穩定性**: 檢查測試結果的一致性
- **測試依賴性**: 分析測試間的依賴關係
- **環境影響**: 評估環境對測試的影響

#### 測試有效性
- **測試價值**: 評估測試的實際價值
- **測試重複**: 識別重複或無效的測試
- **測試維護性**: 評估測試的可維護性
- **測試可讀性**: 檢查測試代碼的可讀性

### 3. 測試問題分析

#### 測試失敗分析
- **失敗原因**: 分析測試失敗的根本原因
- **失敗模式**: 識別失敗的模式和趨勢
- **失敗影響**: 評估失敗對系統的影響
- **修復優先級**: 確定修復的優先級

#### 測試性能分析
- **執行時間**: 分析測試執行時間
- **資源使用**: 檢查測試的資源消耗
- **並發問題**: 分析並發測試問題
- **性能瓶頸**: 識別測試性能瓶頸

### 4. 測試架構評估

#### 測試組織
- **測試結構**: 評估測試代碼的組織結構
- **測試分類**: 檢查測試的分類和命名
- **測試數據**: 評估測試數據的管理
- **測試工具**: 分析測試工具的使用

#### 測試策略
- **測試策略**: 評估整體測試策略
- **測試優先級**: 檢查測試優先級的合理性
- **測試自動化**: 分析自動化程度
- **測試持續性**: 評估持續測試的實施

## 📝 記憶庫文檔生成規範

### 1. 測試分析報告文檔

#### 文件名格式
`test_analysis_report_[項目名]_[日期].md`
**存儲位置**: 專案根目錄下的 memory_bank/ 目錄

#### 內容結構
```markdown
# 測試分析報告

## 📊 執行摘要
- **測試範圍**: 測試的模組和功能
- **測試結果**: 通過率、失敗率、覆蓋率
- **主要問題**: 識別的主要問題
- **建議優先級**: 高、中、低優先級建議

## 🧪 詳細測試結果

### 測試覆蓋率分析
- **代碼覆蓋率**: 具體數值和分析
- **功能覆蓋率**: 功能測試覆蓋情況
- **缺失覆蓋**: 識別未覆蓋的代碼和功能

### 測試質量評估
- **測試穩定性**: 測試結果的穩定性分析
- **測試有效性**: 測試的實際價值評估
- **測試維護性**: 測試代碼的可維護性

### 問題分析
- **測試失敗**: 具體的失敗案例和分析
- **性能問題**: 測試性能問題分析
- **架構問題**: 測試架構相關問題

## 🛠️ 改進建議

### 高優先級修復
- **具體問題**: 需要立即修復的問題
- **修復方案**: 具體的修復建議
- **預期效果**: 修復後的預期改善

### 中優先級改進
- **架構改進**: 測試架構的改進建議
- **工具優化**: 測試工具的優化建議
- **流程改進**: 測試流程的改進建議

### 低優先級優化
- **性能優化**: 測試性能的優化建議
- **文檔完善**: 測試文檔的完善建議
- **工具升級**: 測試工具的升級建議

## 📈 實施計劃

### 短期計劃 (1-2週)
- **緊急修復**: 修復高優先級問題
- **基礎改進**: 實施基礎改進措施
- **監控建立**: 建立測試監控機制

### 中期計劃 (1-2個月)
- **架構優化**: 優化測試架構
- **工具升級**: 升級測試工具
- **流程標準化**: 標準化測試流程

### 長期計劃 (3-6個月)
- **自動化提升**: 提升測試自動化程度
- **持續改進**: 建立持續改進機制
- **最佳實踐**: 建立測試最佳實踐

## 📊 風險評估

### 技術風險
- **測試穩定性**: 測試不穩定的風險
- **覆蓋率不足**: 測試覆蓋率不足的風險
- **工具依賴**: 測試工具依賴的風險

### 業務風險
- **質量風險**: 測試質量不足的風險
- **時間風險**: 測試時間不足的風險
- **資源風險**: 測試資源不足的風險

### 緩解措施
- **具體措施**: 針對每個風險的具體緩解措施
- **監控機制**: 建立風險監控機制
- **應急預案**: 制定應急預案

---

**分析時間**: [日期]
**分析範圍**: [測試範圍]
**分析深度**: [分析深度]
**建議數量**: [建議數量]
```

### 2. 測試改進建議文檔

#### 文件名格式
`test_improvement_suggestions_[項目名]_[日期].md`
**存儲位置**: 專案根目錄下的 memory_bank/ 目錄

#### 內容結構
```markdown
# 測試改進建議

## 🎯 改進目標
- **短期目標**: 1-2週內可達成的目標
- **中期目標**: 1-2個月內可達成的目標
- **長期目標**: 3-6個月內可達成的目標

## 🛠️ 具體建議

### 高優先級建議
#### 1. [建議標題]
- **問題描述**: 具體的問題描述
- **影響分析**: 問題的影響分析
- **解決方案**: 具體的解決方案
- **實施步驟**: 詳細的實施步驟
- **預期效果**: 實施後的預期效果
- **所需資源**: 實施所需的資源

#### 2. [建議標題]
...

### 中優先級建議
#### 1. [建議標題]
...

### 低優先級建議
#### 1. [建議標題]
...

## 📋 實施檢查清單

### 短期實施 (1-2週)
- [ ] 修復關鍵測試失敗
- [ ] 提高測試覆蓋率
- [ ] 優化測試執行時間
- [ ] 建立測試監控

### 中期實施 (1-2個月)
- [ ] 重構測試架構
- [ ] 升級測試工具
- [ ] 標準化測試流程
- [ ] 完善測試文檔

### 長期實施 (3-6個月)
- [ ] 提升自動化程度
- [ ] 建立持續改進機制
- [ ] 實施最佳實踐
- [ ] 建立測試文化

## 📊 成功指標

### 量化指標
- **測試覆蓋率**: 目標提升到 [目標值]%
- **測試通過率**: 目標達到 [目標值]%
- **測試執行時間**: 目標減少到 [目標值]分鐘
- **測試維護成本**: 目標減少 [目標值]%

### 質化指標
- **測試穩定性**: 測試結果更加穩定
- **測試可維護性**: 測試代碼更易維護
- **測試可讀性**: 測試代碼更易理解
- **測試價值**: 測試提供更高價值

---

**建議生成時間**: [日期]
**建議數量**: [建議數量]
**實施週期**: [實施週期]
**預期效果**: [預期效果]
```

## 🛠️ 分析工具使用規範

### 1. Desktop Commander 工具使用
- **測試結果讀取**: 使用 `mcp_Desktop_Commander_read_file` 讀取測試報告
- **測試代碼分析**: 使用 `mcp_Desktop_Commander_search_code` 分析測試代碼
- **測試數據分析**: 使用 `mcp_Desktop_Commander_start_process` 進行數據分析
- **測試文件管理**: 使用 `mcp_Desktop_Commander_list_directory` 管理測��文件

### 2. 測試數據處理
- **測試報告解析**: 解析各種格式的測試報告
- **覆蓋率分析**: 分析代碼覆蓋率數據
- **性能數據分析**: 分析測試性能數據
- **失敗模式分析**: 分析測試失敗模式

### 3. 備用工具
- **語義搜索**: 使用 `codebase_search` 搜索測試相關代碼
- **精確搜索**: 使用 `grep_search` 搜索特定測試模式
- **文件編輯**: 使用 `edit_file` 編輯測試文件

## 📊 分析完成標準

### 1. 分析完整性檢查
- [ ] 測試覆蓋率分析完成
- [ ] 測試質量評估完成
- [ ] 問題分析完成
- [ ] 改進建議生成完成
- [ ] 實施計劃制定完成

### 2. 文檔質量檢查
- [ ] 測試分析報告完整
- [ ] 改進建議具體可操作
- [ ] 實施計劃詳細可行
- [ ] 風險評估全面
- [ ] 成功指標明確

### 3. 建議實用性檢查
- [ ] 建議針對性強
- [ ] 建議可執行性高
- [ ] 建議優先級合理
- [ ] 建議效果可預期
- [ ] 建議資源需求明確

## 🎯 特殊情況處理

### 1. 測試失敗率過高
- **立即分析**: 優先分析失敗原因
- **緊急修復**: 提供緊急修復建議
- **根本原因**: 分析根本原因
- **預防措施**: 制定預防措施

### 2. 測試覆蓋率過低
- **覆蓋率分析**: 詳細分析覆蓋率不足的原因
- **補充建議**: 提供補充測試的具體建議
- **優先級排序**: 按重要性排序補充測試
- **實施計劃**: 制定詳細的補充計劃

### 3. 測試性能問題
- **性能分析**: 分析測試性能瓶頸
- **優化建議**: 提供具體的優化建議
- **工具評估**: 評估測試工具的性能
- **架構改進**: 提出架構改進建議

## 📈 持續改進機制

### 1. 分析質量評估
- **準確性**: 分析結果與實際情況的符合度
- **完整性**: 分析覆蓋範圍的完整性
- **實用性**: 建議的可操作性和價值
- **時效性**: 分析結果的時效性

### 2. 建議效果追蹤
- **實施追蹤**: 追蹤建議的實施情況
- **效果評估**: 評估建議的實際效果
- **反饋收集**: 收集實施過程中的反饋
- **持續改進**: 根據反饋持續改進建議

### 3. 規則更新機制
- **定期回顧**: 每季度回顧規則有效性
- **最佳實踐**: 更新測試分析最佳實踐
- **工具優化**: 根據新工具更新使用規範
- **經驗總結**: 總結分析經驗和教訓
