---
description: 測試核心需求是否完成；測試PRD是否完成 - 自動調用場景：PRD需求測試、核心功能測試、PRD功能驗收測試、PRD性能基準測試、PRD用戶體驗測試、PRD權限安全測試、PRD對比測試報告、PRD測試結果錄入、PRD實現進度記錄、PRD需求解析、PRD測試案例生成、PRD功能測試執行、PRD性能測試執行、PRD用戶體驗測試執行、PRD權限測試執行、PRD整合測試、PRD測試分類、PRD測試標準、PRD測試評估、PRD測試覆蓋率、PRD測試通過率、PRD測試質量評分、PRD測試結果錄入機制、PRD測試結果錄入規範、PRD測試結果錄入流程、result.md文件錄入、PRD測試進度追蹤、PRD測試更新歷史、PRD測試執行摘要、PRD詳細測試結果、PRD需求驗證狀態、PRD測試發現與建議、PRD測試進度追蹤、PRD測試更新歷史、PRD自動化測試觸發、PRD測試變更監控、PRD測試變更檢測、PRD文件變更監控、PRD定期測試安排、PRD測試配置、PRD測試驗收標準、PRD功能驗收、PRD性能驗收、PRD用戶體驗驗收、PRD安全驗收、PRD覆蓋率驗收、PRD驅動原則、PRD需求對比、PRD實現驗證、PRD進度追蹤、PRD測試質量標準、PRD測試準確性、PRD測試完整性、PRD測試可靠性、PRD測試及時性、PRD持續監控、PRD定期評估、PRD動態調整、PRD反饋循環、PRD測試改進機制、PRD測試執行器、PRD測試監控器、PRD測試觸發器、PRD測試評估器、PRD測試記錄器、PRD測試分析器、PRD測試報告生成器、PRD測試結果分析、PRD測試問題診斷、PRD測試改進建議、PRD測試實施計劃、PRD測試風險評估、PRD測試成功指標、PRD測試質量檢查、PRD測試完整性評估、PRD測試可靠性分析、PRD測試準確性驗證、PRD測試一致性檢查、PRD測試重複性分析、PRD測試效率評估、PRD測試效果分析、PRD測試價值評估、PRD測試成本分析、PRD測試收益評估、PRD測試ROI分析、PRD測試投資回報評估、PRD測試效益分析、PRD測試影響評估、PRD測試結果解釋、PRD測試數據可視化、PRD測試趨勢分析、PRD測試模式識別、PRD測試異常檢測、PRD測試異常處理、PRD測試異常預防、PRD測試異常監控、PRD測試異常報告、PRD測試異常追蹤、PRD測試異常解決、PRD測試異常優化、PRD測試異常改進、PRD測試異常管理、PRD測試異常控制、PRD測試異常防範、PRD測試異常預警、PRD測試異常響應、PRD測試異常恢復、PRD測試異常修復、PRD測試異常升級、PRD測試異常降級、PRD測試異常切換、PRD測試異常隔離、PRD測試異常並行、PRD測試異常串行、PRD測試異常異步、PRD測試異常同步、PRD測試異常並發、PRD測試異常分佈、PRD測試異常集中、PRD測試異常分散、PRD測試異常聚合、PRD測試異常分解、PRD測試異常組合、PRD測試異常拆分、PRD測試異常合併、PRD測試異常分離、PRD測試異常連接、PRD測試異常斷開、PRD測試異常啟動、PRD測試異常停止、PRD測試異常暫停、PRD測試異常恢復、PRD測試異常重啟、PRD測試異常重置、PRD測試異常清除、PRD測試異常清理、PRD測試異常整理、PRD測試異常歸檔
globs: 
alwaysApply: false
---
測試核心需求與PRD驗收 - 自動調用場景：需求測試驗證、功能驗收測試、結果統一記錄到memory_bank/result.md
globs: 
alwaysApply: false
---
## 🧪 PRD測試驗證與結果記錄規則

### 1️⃣ 核心測試目標
- **需求驗證**: 確保開發功能符合PRD需求文檔
- **功能驗收**: 執行核心功能驗收測試
- **結果集中**: 所有測試結果統一更新到單一result.md文件

### 2️⃣ 測試結果管理核心原則
- **文件集中管理**: 所有測試結果統一記錄到`memory_bank/result.md`
- **覆蓋更新策略**: 更新現有result.md，不產生多餘文件
- **統一格式標準**: 保持結構一致性，便於追蹤對比

### 3️⃣ 標準化測試與記錄流程
```python
# 測試執行與記錄標準流程
TEST_WORKFLOW = {
    "需求解析": "解析PRD文檔，提取關鍵功能需求",
    "測試執行": "執行功能、性能、用戶體驗、權限安全測試",
    "結果記錄": "統一更新到memory_bank/result.md文件",
    "歷史追蹤": "在result.md中追加更新歷史記錄"
}

# result.md記錄標準結構
RESULT_MD_STRUCTURE = {
    "項目概述": "基本項目信息",
    "測試執行摘要": "測試類型、狀態、覆蓋率、通過率",
    "詳細測試結果": "分類別的具體測試結果",
    "需求驗證狀態": "PRD需求驗證情況",
    "測試發現與建議": "問題與改進建議",
    "測試進度追蹤": "已完成/進行中/待執行測試",
    "更新歷史": "測試執行與更新記錄"
}
```

### 4️⃣ AI測試執行指導
1. **驗證PRD需求**:
   - 讀取並解析PRD文檔
   - 提取關鍵功能需求點
   - 將需求轉換為測試案例

2. **執行核心測試**:
   - 功能驗收測試: 驗證功能完整性
   - 性能基準測試: 檢查性能表現
   - 用戶體驗測試: 評估交互流暢性
   - 權限安全測試: 確認安全防護

3. **統一結果記錄**:
   - 讀取現有result.md文件
   - 更新測試結果(保持結構)
   - 追加更新歷史記錄
   - 保存更新後的result.md

### 5️⃣ 測試質量標準
- **需求覆蓋率**: 確保PRD需求點全部測試覆蓋
- **測試通過率**: 關鍵功能測試通過率目標>95%
- **結果一致性**: 測試結果應與實際功能表現一致
- **記錄完整性**: 測試記錄應完整反映所有測試結果

### 6️⃣ result.md更新策略
```python
# AI執行result.md更新指南
RESULT_MD_UPDATE_GUIDE = {
    "核心原則": "更新現有文件，避免創建多餘文件",
    "讀取階段": "讀取memory_bank/result.md現有內容",
    "更新階段": "保持結構一致性，更新內容",
    "追加階段": "在更新歷史區追加新記錄",
    "保存階段": "覆蓋保存到原文件"
}
```